<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="389.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="254786"><g><title>connect_four`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (40 samples, 0.02%)</title><rect x="0.0078%" y="277" width="0.0157%" height="15" fill="rgb(227,0,7)" fg:x="20" fg:w="40"/><text x="0.2578%" y="287.50"></text></g><g><title>connect_four`__rdl_dealloc (50 samples, 0.02%)</title><rect x="0.0271%" y="277" width="0.0196%" height="15" fill="rgb(217,0,24)" fg:x="69" fg:w="50"/><text x="0.2771%" y="287.50"></text></g><g><title>connect_four`connect_four::board::Board::next_boards (62 samples, 0.02%)</title><rect x="0.0518%" y="277" width="0.0243%" height="15" fill="rgb(221,193,54)" fg:x="132" fg:w="62"/><text x="0.3018%" y="287.50"></text></g><g><title>connect_four`connect_four::board::Board::winner (46 samples, 0.02%)</title><rect x="0.0761%" y="277" width="0.0181%" height="15" fill="rgb(248,212,6)" fg:x="194" fg:w="46"/><text x="0.3261%" y="287.50"></text></g><g><title>connect_four`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (6,807 samples, 2.67%)</title><rect x="1.8894%" y="261" width="2.6717%" height="15" fill="rgb(208,68,35)" fg:x="4814" fg:w="6807"/><text x="2.1394%" y="271.50">co..</text></g><g><title>connect_four`&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (3,998 samples, 1.57%)</title><rect x="4.5615%" y="261" width="1.5692%" height="15" fill="rgb(232,128,0)" fg:x="11622" fg:w="3998"/><text x="4.8115%" y="271.50"></text></g><g><title>connect_four`std::sys::unix::time::Timespec::sub_timespec (2,646 samples, 1.04%)</title><rect x="5.0921%" y="245" width="1.0385%" height="15" fill="rgb(207,160,47)" fg:x="12974" fg:w="2646"/><text x="5.3421%" y="255.50"></text></g><g><title>connect_four`__rdl_alloc (36 samples, 0.01%)</title><rect x="6.1350%" y="261" width="0.0141%" height="15" fill="rgb(228,23,34)" fg:x="15631" fg:w="36"/><text x="6.3850%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (68 samples, 0.03%)</title><rect x="6.1656%" y="197" width="0.0267%" height="15" fill="rgb(218,30,26)" fg:x="15709" fg:w="68"/><text x="6.4156%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_large (68 samples, 0.03%)</title><rect x="6.1656%" y="181" width="0.0267%" height="15" fill="rgb(220,122,19)" fg:x="15709" fg:w="68"/><text x="6.4156%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (68 samples, 0.03%)</title><rect x="6.1656%" y="165" width="0.0267%" height="15" fill="rgb(250,228,42)" fg:x="15709" fg:w="68"/><text x="6.4156%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (68 samples, 0.03%)</title><rect x="6.1656%" y="149" width="0.0267%" height="15" fill="rgb(240,193,28)" fg:x="15709" fg:w="68"/><text x="6.4156%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (92 samples, 0.04%)</title><rect x="6.1589%" y="229" width="0.0361%" height="15" fill="rgb(216,20,37)" fg:x="15692" fg:w="92"/><text x="6.4089%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (92 samples, 0.04%)</title><rect x="6.1589%" y="213" width="0.0361%" height="15" fill="rgb(206,188,39)" fg:x="15692" fg:w="92"/><text x="6.4089%" y="223.50"></text></g><g><title>connect_four`alloc::raw_vec::finish_grow (93 samples, 0.04%)</title><rect x="6.1589%" y="261" width="0.0365%" height="15" fill="rgb(217,207,13)" fg:x="15692" fg:w="93"/><text x="6.4089%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`realloc (93 samples, 0.04%)</title><rect x="6.1589%" y="245" width="0.0365%" height="15" fill="rgb(231,73,38)" fg:x="15692" fg:w="93"/><text x="6.4089%" y="255.50"></text></g><g><title>connect_four`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (333 samples, 0.13%)</title><rect x="6.5902%" y="245" width="0.1307%" height="15" fill="rgb(225,20,46)" fg:x="16791" fg:w="333"/><text x="6.8402%" y="255.50"></text></g><g><title>connect_four`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (689 samples, 0.27%)</title><rect x="6.9038%" y="229" width="0.2704%" height="15" fill="rgb(210,31,41)" fg:x="17590" fg:w="689"/><text x="7.1538%" y="239.50"></text></g><g><title>connect_four`core::array::_&lt;impl core::hash::Hash for [T (6,555 samples, 2.57%)</title><rect x="7.2508%" y="213" width="2.5727%" height="15" fill="rgb(221,200,47)" fg:x="18474" fg:w="6555"/><text x="7.5008%" y="223.50">co..</text></g><g><title> N]&gt;::hash (6,555 samples, 2.57%)</title><rect x="7.2508%" y="197" width="2.5727%" height="15" fill="rgb(226,26,5)" fg:x="18474" fg:w="6555"/><text x="7.5008%" y="207.50"> N..</text></g><g><title>connect_four`core::hash::Hasher::write_usize (5,685 samples, 2.23%)</title><rect x="7.5923%" y="181" width="2.2313%" height="15" fill="rgb(249,33,26)" fg:x="19344" fg:w="5685"/><text x="7.8423%" y="191.50">c..</text></g><g><title>connect_four`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8,504 samples, 3.34%)</title><rect x="6.7209%" y="245" width="3.3377%" height="15" fill="rgb(235,183,28)" fg:x="17124" fg:w="8504"/><text x="6.9709%" y="255.50">con..</text></g><g><title>connect_four`core::hash::BuildHasher::hash_one (7,342 samples, 2.88%)</title><rect x="7.1770%" y="229" width="2.8816%" height="15" fill="rgb(221,5,38)" fg:x="18286" fg:w="7342"/><text x="7.4270%" y="239.50">co..</text></g><g><title>connect_four`core::hash::Hasher::write_usize (599 samples, 0.24%)</title><rect x="9.8235%" y="213" width="0.2351%" height="15" fill="rgb(247,18,42)" fg:x="25029" fg:w="599"/><text x="10.0735%" y="223.50"></text></g><g><title>connect_four`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (443 samples, 0.17%)</title><rect x="10.5481%" y="229" width="0.1739%" height="15" fill="rgb(241,131,45)" fg:x="26875" fg:w="443"/><text x="10.7981%" y="239.50"></text></g><g><title>connect_four`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2,034 samples, 0.80%)</title><rect x="10.9649%" y="213" width="0.7983%" height="15" fill="rgb(249,31,29)" fg:x="27937" fg:w="2034"/><text x="11.2149%" y="223.50"></text></g><g><title>connect_four`core::array::_&lt;impl core::hash::Hash for [T (7,913 samples, 3.11%)</title><rect x="11.8554%" y="197" width="3.1057%" height="15" fill="rgb(225,111,53)" fg:x="30206" fg:w="7913"/><text x="12.1054%" y="207.50">con..</text></g><g><title> N]&gt;::hash (7,913 samples, 3.11%)</title><rect x="11.8554%" y="181" width="3.1057%" height="15" fill="rgb(238,160,17)" fg:x="30206" fg:w="7913"/><text x="12.1054%" y="191.50"> N]..</text></g><g><title>connect_four`core::hash::Hasher::write_usize (6,893 samples, 2.71%)</title><rect x="12.2558%" y="165" width="2.7054%" height="15" fill="rgb(214,148,48)" fg:x="31226" fg:w="6893"/><text x="12.5058%" y="175.50">co..</text></g><g><title>connect_four`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11,528 samples, 4.52%)</title><rect x="10.7219%" y="229" width="4.5246%" height="15" fill="rgb(232,36,49)" fg:x="27318" fg:w="11528"/><text x="10.9719%" y="239.50">conne..</text></g><g><title>connect_four`core::hash::BuildHasher::hash_one (8,867 samples, 3.48%)</title><rect x="11.7663%" y="213" width="3.4802%" height="15" fill="rgb(209,103,24)" fg:x="29979" fg:w="8867"/><text x="12.0163%" y="223.50">con..</text></g><g><title>connect_four`core::hash::Hasher::write_usize (727 samples, 0.29%)</title><rect x="14.9612%" y="197" width="0.2853%" height="15" fill="rgb(229,88,8)" fg:x="38119" fg:w="727"/><text x="15.2112%" y="207.50"></text></g><g><title>connect_four`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (205 samples, 0.08%)</title><rect x="15.4671%" y="213" width="0.0805%" height="15" fill="rgb(213,181,19)" fg:x="39408" fg:w="205"/><text x="15.7171%" y="223.50"></text></g><g><title>connect_four`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (935 samples, 0.37%)</title><rect x="15.6527%" y="197" width="0.3670%" height="15" fill="rgb(254,191,54)" fg:x="39881" fg:w="935"/><text x="15.9027%" y="207.50"></text></g><g><title>connect_four`core::array::_&lt;impl core::hash::Hash for [T (4,008 samples, 1.57%)</title><rect x="16.0660%" y="181" width="1.5731%" height="15" fill="rgb(241,83,37)" fg:x="40934" fg:w="4008"/><text x="16.3160%" y="191.50"></text></g><g><title> N]&gt;::hash (4,008 samples, 1.57%)</title><rect x="16.0660%" y="165" width="1.5731%" height="15" fill="rgb(233,36,39)" fg:x="40934" fg:w="4008"/><text x="16.3160%" y="175.50"></text></g><g><title>connect_four`core::hash::Hasher::write_usize (3,413 samples, 1.34%)</title><rect x="16.2996%" y="149" width="1.3396%" height="15" fill="rgb(226,3,54)" fg:x="41529" fg:w="3413"/><text x="16.5496%" y="159.50"></text></g><g><title>connect_four`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5,673 samples, 2.23%)</title><rect x="15.5476%" y="213" width="2.2266%" height="15" fill="rgb(245,192,40)" fg:x="39613" fg:w="5673"/><text x="15.7976%" y="223.50">c..</text></g><g><title>connect_four`core::hash::BuildHasher::hash_one (4,465 samples, 1.75%)</title><rect x="16.0217%" y="197" width="1.7525%" height="15" fill="rgb(238,167,29)" fg:x="40821" fg:w="4465"/><text x="16.2717%" y="207.50"></text></g><g><title>connect_four`core::hash::Hasher::write_usize (344 samples, 0.14%)</title><rect x="17.6391%" y="181" width="0.1350%" height="15" fill="rgb(232,182,51)" fg:x="44942" fg:w="344"/><text x="17.8891%" y="191.50"></text></g><g><title>connect_four`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (104 samples, 0.04%)</title><rect x="17.9135%" y="197" width="0.0408%" height="15" fill="rgb(231,60,39)" fg:x="45641" fg:w="104"/><text x="18.1635%" y="207.50"></text></g><g><title>connect_four`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (543 samples, 0.21%)</title><rect x="18.0183%" y="181" width="0.2131%" height="15" fill="rgb(208,69,12)" fg:x="45908" fg:w="543"/><text x="18.2683%" y="191.50"></text></g><g><title>connect_four`core::array::_&lt;impl core::hash::Hash for [T (2,073 samples, 0.81%)</title><rect x="18.2569%" y="165" width="0.8136%" height="15" fill="rgb(235,93,37)" fg:x="46516" fg:w="2073"/><text x="18.5069%" y="175.50"></text></g><g><title> N]&gt;::hash (2,073 samples, 0.81%)</title><rect x="18.2569%" y="149" width="0.8136%" height="15" fill="rgb(213,116,39)" fg:x="46516" fg:w="2073"/><text x="18.5069%" y="159.50"></text></g><g><title>connect_four`core::hash::Hasher::write_usize (1,784 samples, 0.70%)</title><rect x="18.3703%" y="133" width="0.7002%" height="15" fill="rgb(222,207,29)" fg:x="46805" fg:w="1784"/><text x="18.6203%" y="143.50"></text></g><g><title>connect_four`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,054 samples, 1.20%)</title><rect x="17.9543%" y="197" width="1.1987%" height="15" fill="rgb(206,96,30)" fg:x="45745" fg:w="3054"/><text x="18.2043%" y="207.50"></text></g><g><title>connect_four`core::hash::BuildHasher::hash_one (2,345 samples, 0.92%)</title><rect x="18.2326%" y="181" width="0.9204%" height="15" fill="rgb(218,138,4)" fg:x="46454" fg:w="2345"/><text x="18.4826%" y="191.50"></text></g><g><title>connect_four`core::hash::Hasher::write_usize (210 samples, 0.08%)</title><rect x="19.0705%" y="165" width="0.0824%" height="15" fill="rgb(250,191,14)" fg:x="48589" fg:w="210"/><text x="19.3205%" y="175.50"></text></g><g><title>connect_four`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (52 samples, 0.02%)</title><rect x="19.2142%" y="181" width="0.0204%" height="15" fill="rgb(239,60,40)" fg:x="48955" fg:w="52"/><text x="19.4642%" y="191.50"></text></g><g><title>connect_four`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (251 samples, 0.10%)</title><rect x="19.2636%" y="165" width="0.0985%" height="15" fill="rgb(206,27,48)" fg:x="49081" fg:w="251"/><text x="19.5136%" y="175.50"></text></g><g><title>connect_four`core::array::_&lt;impl core::hash::Hash for [T (1,007 samples, 0.40%)</title><rect x="19.3743%" y="149" width="0.3952%" height="15" fill="rgb(225,35,8)" fg:x="49363" fg:w="1007"/><text x="19.6243%" y="159.50"></text></g><g><title> N]&gt;::hash (1,007 samples, 0.40%)</title><rect x="19.3743%" y="133" width="0.3952%" height="15" fill="rgb(250,213,24)" fg:x="49363" fg:w="1007"/><text x="19.6243%" y="143.50"></text></g><g><title>connect_four`core::hash::Hasher::write_usize (848 samples, 0.33%)</title><rect x="19.4367%" y="117" width="0.3328%" height="15" fill="rgb(247,123,22)" fg:x="49522" fg:w="848"/><text x="19.6867%" y="127.50"></text></g><g><title>connect_four`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,449 samples, 0.57%)</title><rect x="19.2346%" y="181" width="0.5687%" height="15" fill="rgb(231,138,38)" fg:x="49007" fg:w="1449"/><text x="19.4846%" y="191.50"></text></g><g><title>connect_four`core::hash::BuildHasher::hash_one (1,123 samples, 0.44%)</title><rect x="19.3625%" y="165" width="0.4408%" height="15" fill="rgb(231,145,46)" fg:x="49333" fg:w="1123"/><text x="19.6125%" y="175.50"></text></g><g><title>connect_four`core::hash::Hasher::write_usize (86 samples, 0.03%)</title><rect x="19.7695%" y="149" width="0.0338%" height="15" fill="rgb(251,118,11)" fg:x="50370" fg:w="86"/><text x="20.0195%" y="159.50"></text></g><g><title>connect_four`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (27 samples, 0.01%)</title><rect x="19.8319%" y="165" width="0.0106%" height="15" fill="rgb(217,147,25)" fg:x="50529" fg:w="27"/><text x="20.0819%" y="175.50"></text></g><g><title>connect_four`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (123 samples, 0.05%)</title><rect x="19.8602%" y="149" width="0.0483%" height="15" fill="rgb(247,81,37)" fg:x="50601" fg:w="123"/><text x="20.1102%" y="159.50"></text></g><g><title>connect_four`core::array::_&lt;impl core::hash::Hash for [T (479 samples, 0.19%)</title><rect x="19.9140%" y="133" width="0.1880%" height="15" fill="rgb(209,12,38)" fg:x="50738" fg:w="479"/><text x="20.1640%" y="143.50"></text></g><g><title> N]&gt;::hash (479 samples, 0.19%)</title><rect x="19.9140%" y="117" width="0.1880%" height="15" fill="rgb(227,1,9)" fg:x="50738" fg:w="479"/><text x="20.1640%" y="127.50"></text></g><g><title>connect_four`core::hash::Hasher::write_usize (409 samples, 0.16%)</title><rect x="19.9414%" y="101" width="0.1605%" height="15" fill="rgb(248,47,43)" fg:x="50808" fg:w="409"/><text x="20.1914%" y="111.50"></text></g><g><title>connect_four`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (711 samples, 0.28%)</title><rect x="19.8425%" y="165" width="0.2791%" height="15" fill="rgb(221,10,30)" fg:x="50556" fg:w="711"/><text x="20.0925%" y="175.50"></text></g><g><title>connect_four`core::hash::BuildHasher::hash_one (541 samples, 0.21%)</title><rect x="19.9093%" y="149" width="0.2123%" height="15" fill="rgb(210,229,1)" fg:x="50726" fg:w="541"/><text x="20.1593%" y="159.50"></text></g><g><title>connect_four`core::hash::Hasher::write_usize (50 samples, 0.02%)</title><rect x="20.1020%" y="133" width="0.0196%" height="15" fill="rgb(222,148,37)" fg:x="51217" fg:w="50"/><text x="20.3520%" y="143.50"></text></g><g><title>connect_four`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (63 samples, 0.02%)</title><rect x="20.1526%" y="133" width="0.0247%" height="15" fill="rgb(234,67,33)" fg:x="51346" fg:w="63"/><text x="20.4026%" y="143.50"></text></g><g><title>connect_four`core::array::_&lt;impl core::hash::Hash for [T (230 samples, 0.09%)</title><rect x="20.1789%" y="117" width="0.0903%" height="15" fill="rgb(247,98,35)" fg:x="51413" fg:w="230"/><text x="20.4289%" y="127.50"></text></g><g><title> N]&gt;::hash (230 samples, 0.09%)</title><rect x="20.1789%" y="101" width="0.0903%" height="15" fill="rgb(247,138,52)" fg:x="51413" fg:w="230"/><text x="20.4289%" y="111.50"></text></g><g><title>connect_four`core::hash::Hasher::write_usize (197 samples, 0.08%)</title><rect x="20.1918%" y="85" width="0.0773%" height="15" fill="rgb(213,79,30)" fg:x="51446" fg:w="197"/><text x="20.4418%" y="95.50"></text></g><g><title>connect_four`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (343 samples, 0.13%)</title><rect x="20.1440%" y="149" width="0.1346%" height="15" fill="rgb(246,177,23)" fg:x="51324" fg:w="343"/><text x="20.3940%" y="159.50"></text></g><g><title>connect_four`core::hash::BuildHasher::hash_one (257 samples, 0.10%)</title><rect x="20.1777%" y="133" width="0.1009%" height="15" fill="rgb(230,62,27)" fg:x="51410" fg:w="257"/><text x="20.4277%" y="143.50"></text></g><g><title>connect_four`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (39 samples, 0.02%)</title><rect x="20.2966%" y="117" width="0.0153%" height="15" fill="rgb(216,154,8)" fg:x="51713" fg:w="39"/><text x="20.5466%" y="127.50"></text></g><g><title>connect_four`core::array::_&lt;impl core::hash::Hash for [T (166 samples, 0.07%)</title><rect x="20.3143%" y="101" width="0.0652%" height="15" fill="rgb(244,35,45)" fg:x="51758" fg:w="166"/><text x="20.5643%" y="111.50"></text></g><g><title> N]&gt;::hash (166 samples, 0.07%)</title><rect x="20.3143%" y="85" width="0.0652%" height="15" fill="rgb(251,115,12)" fg:x="51758" fg:w="166"/><text x="20.5643%" y="95.50"></text></g><g><title>connect_four`core::hash::Hasher::write_usize (151 samples, 0.06%)</title><rect x="20.3202%" y="69" width="0.0593%" height="15" fill="rgb(240,54,50)" fg:x="51773" fg:w="151"/><text x="20.5702%" y="79.50"></text></g><g><title>connect_four`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (244 samples, 0.10%)</title><rect x="20.2911%" y="133" width="0.0958%" height="15" fill="rgb(233,84,52)" fg:x="51699" fg:w="244"/><text x="20.5411%" y="143.50"></text></g><g><title>connect_four`core::hash::BuildHasher::hash_one (191 samples, 0.07%)</title><rect x="20.3119%" y="117" width="0.0750%" height="15" fill="rgb(207,117,47)" fg:x="51752" fg:w="191"/><text x="20.5619%" y="127.50"></text></g><g><title>connect_four`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (29 samples, 0.01%)</title><rect x="20.3948%" y="101" width="0.0114%" height="15" fill="rgb(249,43,39)" fg:x="51963" fg:w="29"/><text x="20.6448%" y="111.50"></text></g><g><title>connect_four`core::array::_&lt;impl core::hash::Hash for [T (118 samples, 0.05%)</title><rect x="20.4073%" y="85" width="0.0463%" height="15" fill="rgb(209,38,44)" fg:x="51995" fg:w="118"/><text x="20.6573%" y="95.50"></text></g><g><title> N]&gt;::hash (118 samples, 0.05%)</title><rect x="20.4073%" y="69" width="0.0463%" height="15" fill="rgb(236,212,23)" fg:x="51995" fg:w="118"/><text x="20.6573%" y="79.50"></text></g><g><title>connect_four`core::hash::Hasher::write_usize (106 samples, 0.04%)</title><rect x="20.4120%" y="53" width="0.0416%" height="15" fill="rgb(242,79,21)" fg:x="52007" fg:w="106"/><text x="20.6620%" y="63.50"></text></g><g><title>connect_four`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (166 samples, 0.07%)</title><rect x="20.3928%" y="117" width="0.0652%" height="15" fill="rgb(211,96,35)" fg:x="51958" fg:w="166"/><text x="20.6428%" y="127.50"></text></g><g><title>connect_four`core::hash::BuildHasher::hash_one (132 samples, 0.05%)</title><rect x="20.4061%" y="101" width="0.0518%" height="15" fill="rgb(253,215,40)" fg:x="51992" fg:w="132"/><text x="20.6561%" y="111.50"></text></g><g><title>connect_four`core::array::_&lt;impl core::hash::Hash for [T (54 samples, 0.02%)</title><rect x="20.4693%" y="69" width="0.0212%" height="15" fill="rgb(211,81,21)" fg:x="52153" fg:w="54"/><text x="20.7193%" y="79.50"></text></g><g><title> N]&gt;::hash (54 samples, 0.02%)</title><rect x="20.4693%" y="53" width="0.0212%" height="15" fill="rgb(208,190,38)" fg:x="52153" fg:w="54"/><text x="20.7193%" y="63.50"></text></g><g><title>connect_four`core::hash::Hasher::write_usize (43 samples, 0.02%)</title><rect x="20.4737%" y="37" width="0.0169%" height="15" fill="rgb(235,213,38)" fg:x="52164" fg:w="43"/><text x="20.7237%" y="47.50"></text></g><g><title>connect_four`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (80 samples, 0.03%)</title><rect x="20.4619%" y="101" width="0.0314%" height="15" fill="rgb(237,122,38)" fg:x="52134" fg:w="80"/><text x="20.7119%" y="111.50"></text></g><g><title>connect_four`core::hash::BuildHasher::hash_one (62 samples, 0.02%)</title><rect x="20.4689%" y="85" width="0.0243%" height="15" fill="rgb(244,218,35)" fg:x="52152" fg:w="62"/><text x="20.7189%" y="95.50"></text></g><g><title>connect_four`core::array::_&lt;impl core::hash::Hash for [T (28 samples, 0.01%)</title><rect x="20.5015%" y="53" width="0.0110%" height="15" fill="rgb(240,68,47)" fg:x="52235" fg:w="28"/><text x="20.7515%" y="63.50"></text></g><g><title> N]&gt;::hash (28 samples, 0.01%)</title><rect x="20.5015%" y="37" width="0.0110%" height="15" fill="rgb(210,16,53)" fg:x="52235" fg:w="28"/><text x="20.7515%" y="47.50"></text></g><g><title>connect_four`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (43 samples, 0.02%)</title><rect x="20.4964%" y="85" width="0.0169%" height="15" fill="rgb(235,124,12)" fg:x="52222" fg:w="43"/><text x="20.7464%" y="95.50"></text></g><g><title>connect_four`core::hash::BuildHasher::hash_one (31 samples, 0.01%)</title><rect x="20.5011%" y="69" width="0.0122%" height="15" fill="rgb(224,169,11)" fg:x="52234" fg:w="31"/><text x="20.7511%" y="79.50"></text></g><g><title>connect_four`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (33 samples, 0.01%)</title><rect x="20.5160%" y="69" width="0.0130%" height="15" fill="rgb(250,166,2)" fg:x="52272" fg:w="33"/><text x="20.7660%" y="79.50"></text></g><g><title>connect_four`connect_four::analysis::update_parents (56 samples, 0.02%)</title><rect x="20.5380%" y="53" width="0.0220%" height="15" fill="rgb(242,216,29)" fg:x="52328" fg:w="56"/><text x="20.7880%" y="63.50"></text></g><g><title>connect_four`connect_four::analysis::update_parents (94 samples, 0.04%)</title><rect x="20.5290%" y="69" width="0.0369%" height="15" fill="rgb(230,116,27)" fg:x="52305" fg:w="94"/><text x="20.7790%" y="79.50"></text></g><g><title>connect_four`connect_four::analysis::update_parents (172 samples, 0.07%)</title><rect x="20.5137%" y="85" width="0.0675%" height="15" fill="rgb(228,99,48)" fg:x="52266" fg:w="172"/><text x="20.7637%" y="95.50"></text></g><g><title>connect_four`connect_four::analysis::update_parents (271 samples, 0.11%)</title><rect x="20.4933%" y="101" width="0.1064%" height="15" fill="rgb(253,11,6)" fg:x="52214" fg:w="271"/><text x="20.7433%" y="111.50"></text></g><g><title>connect_four`connect_four::board::Board::next_to_move (26 samples, 0.01%)</title><rect x="20.6079%" y="101" width="0.0102%" height="15" fill="rgb(247,143,39)" fg:x="52506" fg:w="26"/><text x="20.8579%" y="111.50"></text></g><g><title>connect_four`core::hash::BuildHasher::hash_one (40 samples, 0.02%)</title><rect x="20.6204%" y="101" width="0.0157%" height="15" fill="rgb(236,97,10)" fg:x="52538" fg:w="40"/><text x="20.8704%" y="111.50"></text></g><g><title>connect_four`core::array::_&lt;impl core::hash::Hash for [T (39 samples, 0.02%)</title><rect x="20.6208%" y="85" width="0.0153%" height="15" fill="rgb(233,208,19)" fg:x="52539" fg:w="39"/><text x="20.8708%" y="95.50"></text></g><g><title> N]&gt;::hash (39 samples, 0.02%)</title><rect x="20.6208%" y="69" width="0.0153%" height="15" fill="rgb(216,164,2)" fg:x="52539" fg:w="39"/><text x="20.8708%" y="79.50"></text></g><g><title>connect_four`core::hash::Hasher::write_usize (35 samples, 0.01%)</title><rect x="20.6224%" y="53" width="0.0137%" height="15" fill="rgb(220,129,5)" fg:x="52543" fg:w="35"/><text x="20.8724%" y="63.50"></text></g><g><title>connect_four`connect_four::analysis::update_parents (463 samples, 0.18%)</title><rect x="20.4580%" y="117" width="0.1817%" height="15" fill="rgb(242,17,10)" fg:x="52124" fg:w="463"/><text x="20.7080%" y="127.50"></text></g><g><title>connect_four`connect_four::board::Board::next_to_move (35 samples, 0.01%)</title><rect x="20.6479%" y="117" width="0.0137%" height="15" fill="rgb(242,107,0)" fg:x="52608" fg:w="35"/><text x="20.8979%" y="127.50"></text></g><g><title>connect_four`connect_four::board::Board::winner (33 samples, 0.01%)</title><rect x="20.6487%" y="101" width="0.0130%" height="15" fill="rgb(251,28,31)" fg:x="52610" fg:w="33"/><text x="20.8987%" y="111.50"></text></g><g><title>connect_four`core::array::_&lt;impl core::hash::Hash for [T (44 samples, 0.02%)</title><rect x="20.6660%" y="101" width="0.0173%" height="15" fill="rgb(233,223,10)" fg:x="52654" fg:w="44"/><text x="20.9160%" y="111.50"></text></g><g><title> N]&gt;::hash (44 samples, 0.02%)</title><rect x="20.6660%" y="85" width="0.0173%" height="15" fill="rgb(215,21,27)" fg:x="52654" fg:w="44"/><text x="20.9160%" y="95.50"></text></g><g><title>connect_four`core::hash::Hasher::write_usize (41 samples, 0.02%)</title><rect x="20.6671%" y="69" width="0.0161%" height="15" fill="rgb(232,23,21)" fg:x="52657" fg:w="41"/><text x="20.9171%" y="79.50"></text></g><g><title>connect_four`core::hash::BuildHasher::hash_one (50 samples, 0.02%)</title><rect x="20.6660%" y="117" width="0.0196%" height="15" fill="rgb(244,5,23)" fg:x="52654" fg:w="50"/><text x="20.9160%" y="127.50"></text></g><g><title>connect_four`connect_four::analysis::update_parents (775 samples, 0.30%)</title><rect x="20.3877%" y="133" width="0.3042%" height="15" fill="rgb(226,81,46)" fg:x="51945" fg:w="775"/><text x="20.6377%" y="143.50"></text></g><g><title>connect_four`connect_four::board::Board::next_to_move (34 samples, 0.01%)</title><rect x="20.6954%" y="117" width="0.0133%" height="15" fill="rgb(247,70,30)" fg:x="52729" fg:w="34"/><text x="20.9454%" y="127.50"></text></g><g><title>connect_four`connect_four::board::Board::winner (31 samples, 0.01%)</title><rect x="20.6966%" y="101" width="0.0122%" height="15" fill="rgb(212,68,19)" fg:x="52732" fg:w="31"/><text x="20.9466%" y="111.50"></text></g><g><title>connect_four`connect_four::board::Board::next_boards (46 samples, 0.02%)</title><rect x="20.6919%" y="133" width="0.0181%" height="15" fill="rgb(240,187,13)" fg:x="52720" fg:w="46"/><text x="20.9419%" y="143.50"></text></g><g><title>connect_four`connect_four::board::Board::next_to_move (62 samples, 0.02%)</title><rect x="20.7099%" y="133" width="0.0243%" height="15" fill="rgb(223,113,26)" fg:x="52766" fg:w="62"/><text x="20.9599%" y="143.50"></text></g><g><title>connect_four`connect_four::board::Board::winner (57 samples, 0.02%)</title><rect x="20.7119%" y="117" width="0.0224%" height="15" fill="rgb(206,192,2)" fg:x="52771" fg:w="57"/><text x="20.9619%" y="127.50"></text></g><g><title>connect_four`core::array::_&lt;impl core::hash::Hash for [T (87 samples, 0.03%)</title><rect x="20.7433%" y="117" width="0.0341%" height="15" fill="rgb(241,108,4)" fg:x="52851" fg:w="87"/><text x="20.9933%" y="127.50"></text></g><g><title> N]&gt;::hash (87 samples, 0.03%)</title><rect x="20.7433%" y="101" width="0.0341%" height="15" fill="rgb(247,173,49)" fg:x="52851" fg:w="87"/><text x="20.9933%" y="111.50"></text></g><g><title>connect_four`core::hash::Hasher::write_usize (72 samples, 0.03%)</title><rect x="20.7492%" y="85" width="0.0283%" height="15" fill="rgb(224,114,35)" fg:x="52866" fg:w="72"/><text x="20.9992%" y="95.50"></text></g><g><title>connect_four`core::hash::BuildHasher::hash_one (96 samples, 0.04%)</title><rect x="20.7425%" y="133" width="0.0377%" height="15" fill="rgb(245,159,27)" fg:x="52849" fg:w="96"/><text x="20.9925%" y="143.50"></text></g><g><title>connect_four`connect_four::analysis::update_parents (1,305 samples, 0.51%)</title><rect x="20.2786%" y="149" width="0.5122%" height="15" fill="rgb(245,172,44)" fg:x="51667" fg:w="1305"/><text x="20.5286%" y="159.50"></text></g><g><title>connect_four`connect_four::board::Board::next_to_move (49 samples, 0.02%)</title><rect x="20.7967%" y="133" width="0.0192%" height="15" fill="rgb(236,23,11)" fg:x="52987" fg:w="49"/><text x="21.0467%" y="143.50"></text></g><g><title>connect_four`connect_four::board::Board::winner (48 samples, 0.02%)</title><rect x="20.7971%" y="117" width="0.0188%" height="15" fill="rgb(205,117,38)" fg:x="52988" fg:w="48"/><text x="21.0471%" y="127.50"></text></g><g><title>connect_four`connect_four::board::Board::next_boards (70 samples, 0.03%)</title><rect x="20.7908%" y="149" width="0.0275%" height="15" fill="rgb(237,72,25)" fg:x="52972" fg:w="70"/><text x="21.0408%" y="159.50"></text></g><g><title>connect_four`connect_four::board::Board::next_to_move (115 samples, 0.05%)</title><rect x="20.8183%" y="149" width="0.0451%" height="15" fill="rgb(244,70,9)" fg:x="53042" fg:w="115"/><text x="21.0683%" y="159.50"></text></g><g><title>connect_four`connect_four::board::Board::winner (108 samples, 0.04%)</title><rect x="20.8210%" y="133" width="0.0424%" height="15" fill="rgb(217,125,39)" fg:x="53049" fg:w="108"/><text x="21.0710%" y="143.50"></text></g><g><title>connect_four`connect_four::board::Board::next_to_move (34 samples, 0.01%)</title><rect x="20.8657%" y="133" width="0.0133%" height="15" fill="rgb(235,36,10)" fg:x="53163" fg:w="34"/><text x="21.1157%" y="143.50"></text></g><g><title>connect_four`connect_four::board::Board::winner (28 samples, 0.01%)</title><rect x="20.8681%" y="117" width="0.0110%" height="15" fill="rgb(251,123,47)" fg:x="53169" fg:w="28"/><text x="21.1181%" y="127.50"></text></g><g><title>connect_four`connect_four::board::Board::prev_boards (44 samples, 0.02%)</title><rect x="20.8634%" y="149" width="0.0173%" height="15" fill="rgb(221,13,13)" fg:x="53157" fg:w="44"/><text x="21.1134%" y="159.50"></text></g><g><title>connect_four`core::array::_&lt;impl core::hash::Hash for [T (180 samples, 0.07%)</title><rect x="20.8822%" y="133" width="0.0706%" height="15" fill="rgb(238,131,9)" fg:x="53205" fg:w="180"/><text x="21.1322%" y="143.50"></text></g><g><title> N]&gt;::hash (180 samples, 0.07%)</title><rect x="20.8822%" y="117" width="0.0706%" height="15" fill="rgb(211,50,8)" fg:x="53205" fg:w="180"/><text x="21.1322%" y="127.50"></text></g><g><title>connect_four`core::hash::Hasher::write_usize (156 samples, 0.06%)</title><rect x="20.8917%" y="101" width="0.0612%" height="15" fill="rgb(245,182,24)" fg:x="53229" fg:w="156"/><text x="21.1417%" y="111.50"></text></g><g><title>connect_four`core::hash::BuildHasher::hash_one (202 samples, 0.08%)</title><rect x="20.8807%" y="149" width="0.0793%" height="15" fill="rgb(242,14,37)" fg:x="53201" fg:w="202"/><text x="21.1307%" y="159.50"></text></g><g><title>connect_four`connect_four::analysis::update_parents (2,178 samples, 0.85%)</title><rect x="20.1224%" y="165" width="0.8548%" height="15" fill="rgb(246,228,12)" fg:x="51269" fg:w="2178"/><text x="20.3724%" y="175.50"></text></g><g><title>connect_four`connect_four::board::Board::next_to_move (109 samples, 0.04%)</title><rect x="20.9870%" y="149" width="0.0428%" height="15" fill="rgb(213,55,15)" fg:x="53472" fg:w="109"/><text x="21.2370%" y="159.50"></text></g><g><title>connect_four`connect_four::board::Board::winner (104 samples, 0.04%)</title><rect x="20.9890%" y="133" width="0.0408%" height="15" fill="rgb(209,9,3)" fg:x="53477" fg:w="104"/><text x="21.2390%" y="143.50"></text></g><g><title>connect_four`connect_four::board::Board::next_boards (145 samples, 0.06%)</title><rect x="20.9772%" y="165" width="0.0569%" height="15" fill="rgb(230,59,30)" fg:x="53447" fg:w="145"/><text x="21.2272%" y="175.50"></text></g><g><title>connect_four`connect_four::board::Board::next_to_move (179 samples, 0.07%)</title><rect x="21.0341%" y="165" width="0.0703%" height="15" fill="rgb(209,121,21)" fg:x="53592" fg:w="179"/><text x="21.2841%" y="175.50"></text></g><g><title>connect_four`connect_four::board::Board::winner (159 samples, 0.06%)</title><rect x="21.0420%" y="149" width="0.0624%" height="15" fill="rgb(220,109,13)" fg:x="53612" fg:w="159"/><text x="21.2920%" y="159.50"></text></g><g><title>connect_four`connect_four::board::Board::next_to_move (46 samples, 0.02%)</title><rect x="21.1075%" y="149" width="0.0181%" height="15" fill="rgb(232,18,1)" fg:x="53779" fg:w="46"/><text x="21.3575%" y="159.50"></text></g><g><title>connect_four`connect_four::board::Board::winner (43 samples, 0.02%)</title><rect x="21.1087%" y="133" width="0.0169%" height="15" fill="rgb(215,41,42)" fg:x="53782" fg:w="43"/><text x="21.3587%" y="143.50"></text></g><g><title>connect_four`connect_four::board::Board::prev_boards (57 samples, 0.02%)</title><rect x="21.1044%" y="165" width="0.0224%" height="15" fill="rgb(224,123,36)" fg:x="53771" fg:w="57"/><text x="21.3544%" y="175.50"></text></g><g><title>connect_four`core::array::_&lt;impl core::hash::Hash for [T (297 samples, 0.12%)</title><rect x="21.1315%" y="149" width="0.1166%" height="15" fill="rgb(240,125,3)" fg:x="53840" fg:w="297"/><text x="21.3815%" y="159.50"></text></g><g><title> N]&gt;::hash (297 samples, 0.12%)</title><rect x="21.1315%" y="133" width="0.1166%" height="15" fill="rgb(205,98,50)" fg:x="53840" fg:w="297"/><text x="21.3815%" y="143.50"></text></g><g><title>connect_four`core::hash::Hasher::write_usize (264 samples, 0.10%)</title><rect x="21.1444%" y="117" width="0.1036%" height="15" fill="rgb(205,185,37)" fg:x="53873" fg:w="264"/><text x="21.3944%" y="127.50"></text></g><g><title>connect_four`core::hash::BuildHasher::hash_one (332 samples, 0.13%)</title><rect x="21.1271%" y="165" width="0.1303%" height="15" fill="rgb(238,207,15)" fg:x="53829" fg:w="332"/><text x="21.3771%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (35 samples, 0.01%)</title><rect x="21.2708%" y="165" width="0.0137%" height="15" fill="rgb(213,199,42)" fg:x="54195" fg:w="35"/><text x="21.5208%" y="175.50"></text></g><g><title>connect_four`connect_four::analysis::update_parents (3,774 samples, 1.48%)</title><rect x="19.8037%" y="181" width="1.4812%" height="15" fill="rgb(235,201,11)" fg:x="50457" fg:w="3774"/><text x="20.0537%" y="191.50"></text></g><g><title>connect_four`connect_four::board::Board::next_to_move (225 samples, 0.09%)</title><rect x="21.3057%" y="165" width="0.0883%" height="15" fill="rgb(207,46,11)" fg:x="54284" fg:w="225"/><text x="21.5557%" y="175.50"></text></g><g><title>connect_four`connect_four::board::Board::winner (210 samples, 0.08%)</title><rect x="21.3116%" y="149" width="0.0824%" height="15" fill="rgb(241,35,35)" fg:x="54299" fg:w="210"/><text x="21.5616%" y="159.50"></text></g><g><title>connect_four`connect_four::board::Board::next_boards (308 samples, 0.12%)</title><rect x="21.2849%" y="181" width="0.1209%" height="15" fill="rgb(243,32,47)" fg:x="54231" fg:w="308"/><text x="21.5349%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (29 samples, 0.01%)</title><rect x="21.3944%" y="165" width="0.0114%" height="15" fill="rgb(247,202,23)" fg:x="54510" fg:w="29"/><text x="21.6444%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (28 samples, 0.01%)</title><rect x="21.3948%" y="149" width="0.0110%" height="15" fill="rgb(219,102,11)" fg:x="54511" fg:w="28"/><text x="21.6448%" y="159.50"></text></g><g><title>connect_four`connect_four::board::Board::next_to_move (411 samples, 0.16%)</title><rect x="21.4058%" y="181" width="0.1613%" height="15" fill="rgb(243,110,44)" fg:x="54539" fg:w="411"/><text x="21.6558%" y="191.50"></text></g><g><title>connect_four`connect_four::board::Board::winner (374 samples, 0.15%)</title><rect x="21.4203%" y="165" width="0.1468%" height="15" fill="rgb(222,74,54)" fg:x="54576" fg:w="374"/><text x="21.6703%" y="175.50"></text></g><g><title>connect_four`connect_four::board::Board::next_to_move (75 samples, 0.03%)</title><rect x="21.5761%" y="165" width="0.0294%" height="15" fill="rgb(216,99,12)" fg:x="54973" fg:w="75"/><text x="21.8261%" y="175.50"></text></g><g><title>connect_four`connect_four::board::Board::winner (70 samples, 0.03%)</title><rect x="21.5781%" y="149" width="0.0275%" height="15" fill="rgb(226,22,26)" fg:x="54978" fg:w="70"/><text x="21.8281%" y="159.50"></text></g><g><title>connect_four`connect_four::board::Board::prev_boards (109 samples, 0.04%)</title><rect x="21.5671%" y="181" width="0.0428%" height="15" fill="rgb(217,163,10)" fg:x="54950" fg:w="109"/><text x="21.8171%" y="191.50"></text></g><g><title>connect_four`core::array::_&lt;impl core::hash::Hash for [T (624 samples, 0.24%)</title><rect x="21.6181%" y="165" width="0.2449%" height="15" fill="rgb(213,25,53)" fg:x="55080" fg:w="624"/><text x="21.8681%" y="175.50"></text></g><g><title> N]&gt;::hash (624 samples, 0.24%)</title><rect x="21.6181%" y="149" width="0.2449%" height="15" fill="rgb(252,105,26)" fg:x="55080" fg:w="624"/><text x="21.8681%" y="159.50"></text></g><g><title>connect_four`core::hash::Hasher::write_usize (542 samples, 0.21%)</title><rect x="21.6503%" y="133" width="0.2127%" height="15" fill="rgb(220,39,43)" fg:x="55162" fg:w="542"/><text x="21.9003%" y="143.50"></text></g><g><title>connect_four`core::hash::BuildHasher::hash_one (705 samples, 0.28%)</title><rect x="21.6111%" y="181" width="0.2767%" height="15" fill="rgb(229,68,48)" fg:x="55062" fg:w="705"/><text x="21.8611%" y="191.50"></text></g><g><title>connect_four`core::hash::Hasher::write_usize (63 samples, 0.02%)</title><rect x="21.8631%" y="165" width="0.0247%" height="15" fill="rgb(252,8,32)" fg:x="55704" fg:w="63"/><text x="22.1131%" y="175.50"></text></g><g><title>connect_four`core::array::_&lt;impl core::hash::Hash for [T (39 samples, 0.02%)</title><rect x="21.8905%" y="149" width="0.0153%" height="15" fill="rgb(223,20,43)" fg:x="55774" fg:w="39"/><text x="22.1405%" y="159.50"></text></g><g><title> N]&gt;::hash (39 samples, 0.02%)</title><rect x="21.8905%" y="133" width="0.0153%" height="15" fill="rgb(229,81,49)" fg:x="55774" fg:w="39"/><text x="22.1405%" y="143.50"></text></g><g><title>connect_four`core::hash::Hasher::write_usize (34 samples, 0.01%)</title><rect x="21.8925%" y="117" width="0.0133%" height="15" fill="rgb(236,28,36)" fg:x="55779" fg:w="34"/><text x="22.1425%" y="127.50"></text></g><g><title>connect_four`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (50 samples, 0.02%)</title><rect x="21.8878%" y="181" width="0.0196%" height="15" fill="rgb(249,185,26)" fg:x="55767" fg:w="50"/><text x="22.1378%" y="191.50"></text></g><g><title>connect_four`core::hash::BuildHasher::hash_one (44 samples, 0.02%)</title><rect x="21.8901%" y="165" width="0.0173%" height="15" fill="rgb(249,174,33)" fg:x="55773" fg:w="44"/><text x="22.1401%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (68 samples, 0.03%)</title><rect x="21.9180%" y="181" width="0.0267%" height="15" fill="rgb(233,201,37)" fg:x="55844" fg:w="68"/><text x="22.1680%" y="191.50"></text></g><g><title>connect_four`connect_four::analysis::update_parents (7,113 samples, 2.79%)</title><rect x="19.1537%" y="197" width="2.7918%" height="15" fill="rgb(221,78,26)" fg:x="48801" fg:w="7113"/><text x="19.4037%" y="207.50">co..</text></g><g><title>connect_four`connect_four::board::Board::next_to_move (445 samples, 0.17%)</title><rect x="21.9902%" y="181" width="0.1747%" height="15" fill="rgb(250,127,30)" fg:x="56028" fg:w="445"/><text x="22.2402%" y="191.50"></text></g><g><title>connect_four`connect_four::board::Board::winner (410 samples, 0.16%)</title><rect x="22.0040%" y="165" width="0.1609%" height="15" fill="rgb(230,49,44)" fg:x="56063" fg:w="410"/><text x="22.2540%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (60 samples, 0.02%)</title><rect x="22.1668%" y="181" width="0.0235%" height="15" fill="rgb(229,67,23)" fg:x="56478" fg:w="60"/><text x="22.4168%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (56 samples, 0.02%)</title><rect x="22.1684%" y="165" width="0.0220%" height="15" fill="rgb(249,83,47)" fg:x="56482" fg:w="56"/><text x="22.4184%" y="175.50"></text></g><g><title>connect_four`connect_four::board::Board::next_boards (625 samples, 0.25%)</title><rect x="21.9455%" y="197" width="0.2453%" height="15" fill="rgb(215,43,3)" fg:x="55914" fg:w="625"/><text x="22.1955%" y="207.50"></text></g><g><title>connect_four`connect_four::board::Board::next_to_move (801 samples, 0.31%)</title><rect x="22.1908%" y="197" width="0.3144%" height="15" fill="rgb(238,154,13)" fg:x="56539" fg:w="801"/><text x="22.4408%" y="207.50"></text></g><g><title>connect_four`connect_four::board::Board::winner (728 samples, 0.29%)</title><rect x="22.2194%" y="181" width="0.2857%" height="15" fill="rgb(219,56,2)" fg:x="56612" fg:w="728"/><text x="22.4694%" y="191.50"></text></g><g><title>connect_four`connect_four::board::Board::next_to_move (190 samples, 0.07%)</title><rect x="22.5185%" y="181" width="0.0746%" height="15" fill="rgb(233,0,4)" fg:x="57374" fg:w="190"/><text x="22.7685%" y="191.50"></text></g><g><title>connect_four`connect_four::board::Board::winner (174 samples, 0.07%)</title><rect x="22.5248%" y="165" width="0.0683%" height="15" fill="rgb(235,30,7)" fg:x="57390" fg:w="174"/><text x="22.7748%" y="175.50"></text></g><g><title>connect_four`connect_four::board::Board::prev_boards (251 samples, 0.10%)</title><rect x="22.5052%" y="197" width="0.0985%" height="15" fill="rgb(250,79,13)" fg:x="57340" fg:w="251"/><text x="22.7552%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (26 samples, 0.01%)</title><rect x="22.5935%" y="181" width="0.0102%" height="15" fill="rgb(211,146,34)" fg:x="57565" fg:w="26"/><text x="22.8435%" y="191.50"></text></g><g><title>connect_four`core::array::_&lt;impl core::hash::Hash for [T (1,348 samples, 0.53%)</title><rect x="22.6217%" y="181" width="0.5291%" height="15" fill="rgb(228,22,38)" fg:x="57637" fg:w="1348"/><text x="22.8717%" y="191.50"></text></g><g><title> N]&gt;::hash (1,348 samples, 0.53%)</title><rect x="22.6217%" y="165" width="0.5291%" height="15" fill="rgb(235,168,5)" fg:x="57637" fg:w="1348"/><text x="22.8717%" y="175.50"></text></g><g><title>connect_four`core::hash::Hasher::write_usize (1,159 samples, 0.45%)</title><rect x="22.6959%" y="149" width="0.4549%" height="15" fill="rgb(221,155,16)" fg:x="57826" fg:w="1159"/><text x="22.9459%" y="159.50"></text></g><g><title>connect_four`core::hash::BuildHasher::hash_one (1,534 samples, 0.60%)</title><rect x="22.6041%" y="197" width="0.6021%" height="15" fill="rgb(215,215,53)" fg:x="57592" fg:w="1534"/><text x="22.8541%" y="207.50"></text></g><g><title>connect_four`core::hash::Hasher::write_usize (141 samples, 0.06%)</title><rect x="23.1508%" y="181" width="0.0553%" height="15" fill="rgb(223,4,10)" fg:x="58985" fg:w="141"/><text x="23.4008%" y="191.50"></text></g><g><title>connect_four`core::array::_&lt;impl core::hash::Hash for [T (72 samples, 0.03%)</title><rect x="23.2120%" y="165" width="0.0283%" height="15" fill="rgb(234,103,6)" fg:x="59141" fg:w="72"/><text x="23.4620%" y="175.50"></text></g><g><title> N]&gt;::hash (72 samples, 0.03%)</title><rect x="23.2120%" y="149" width="0.0283%" height="15" fill="rgb(227,97,0)" fg:x="59141" fg:w="72"/><text x="23.4620%" y="159.50"></text></g><g><title>connect_four`core::hash::Hasher::write_usize (66 samples, 0.03%)</title><rect x="23.2144%" y="133" width="0.0259%" height="15" fill="rgb(234,150,53)" fg:x="59147" fg:w="66"/><text x="23.4644%" y="143.50"></text></g><g><title>connect_four`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (97 samples, 0.04%)</title><rect x="23.2061%" y="197" width="0.0381%" height="15" fill="rgb(228,201,54)" fg:x="59126" fg:w="97"/><text x="23.4561%" y="207.50"></text></g><g><title>connect_four`core::hash::BuildHasher::hash_one (84 samples, 0.03%)</title><rect x="23.2112%" y="181" width="0.0330%" height="15" fill="rgb(222,22,37)" fg:x="59139" fg:w="84"/><text x="23.4612%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (33 samples, 0.01%)</title><rect x="23.2678%" y="181" width="0.0130%" height="15" fill="rgb(237,53,32)" fg:x="59283" fg:w="33"/><text x="23.5178%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (119 samples, 0.05%)</title><rect x="23.2532%" y="197" width="0.0467%" height="15" fill="rgb(233,25,53)" fg:x="59246" fg:w="119"/><text x="23.5032%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (49 samples, 0.02%)</title><rect x="23.2807%" y="181" width="0.0192%" height="15" fill="rgb(210,40,34)" fg:x="59316" fg:w="49"/><text x="23.5307%" y="191.50"></text></g><g><title>connect_four`connect_four::analysis::update_parents (14,083 samples, 5.53%)</title><rect x="17.7757%" y="213" width="5.5274%" height="15" fill="rgb(241,220,44)" fg:x="45290" fg:w="14083"/><text x="18.0257%" y="223.50">connect..</text></g><g><title>connect_four`connect_four::board::Board::next_to_move (792 samples, 0.31%)</title><rect x="23.3863%" y="197" width="0.3108%" height="15" fill="rgb(235,28,35)" fg:x="59585" fg:w="792"/><text x="23.6363%" y="207.50"></text></g><g><title>connect_four`connect_four::board::Board::winner (740 samples, 0.29%)</title><rect x="23.4067%" y="181" width="0.2904%" height="15" fill="rgb(210,56,17)" fg:x="59637" fg:w="740"/><text x="23.6567%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (109 samples, 0.04%)</title><rect x="23.7003%" y="197" width="0.0428%" height="15" fill="rgb(224,130,29)" fg:x="60385" fg:w="109"/><text x="23.9503%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (108 samples, 0.04%)</title><rect x="23.7007%" y="181" width="0.0424%" height="15" fill="rgb(235,212,8)" fg:x="60386" fg:w="108"/><text x="23.9507%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (36 samples, 0.01%)</title><rect x="23.7289%" y="165" width="0.0141%" height="15" fill="rgb(223,33,50)" fg:x="60458" fg:w="36"/><text x="23.9789%" y="175.50"></text></g><g><title>connect_four`connect_four::board::Board::next_boards (1,123 samples, 0.44%)</title><rect x="23.3031%" y="213" width="0.4408%" height="15" fill="rgb(219,149,13)" fg:x="59373" fg:w="1123"/><text x="23.5531%" y="223.50"></text></g><g><title>connect_four`connect_four::board::Board::next_to_move (1,351 samples, 0.53%)</title><rect x="23.7438%" y="213" width="0.5302%" height="15" fill="rgb(250,156,29)" fg:x="60496" fg:w="1351"/><text x="23.9938%" y="223.50"></text></g><g><title>connect_four`connect_four::board::Board::winner (1,230 samples, 0.48%)</title><rect x="23.7913%" y="197" width="0.4828%" height="15" fill="rgb(216,193,19)" fg:x="60617" fg:w="1230"/><text x="24.0413%" y="207.50"></text></g><g><title>connect_four`connect_four::board::Board::next_to_move (344 samples, 0.14%)</title><rect x="24.2992%" y="197" width="0.1350%" height="15" fill="rgb(216,135,14)" fg:x="61911" fg:w="344"/><text x="24.5492%" y="207.50"></text></g><g><title>connect_four`connect_four::board::Board::winner (320 samples, 0.13%)</title><rect x="24.3086%" y="181" width="0.1256%" height="15" fill="rgb(241,47,5)" fg:x="61935" fg:w="320"/><text x="24.5586%" y="191.50"></text></g><g><title>connect_four`connect_four::board::Board::prev_boards (460 samples, 0.18%)</title><rect x="24.2741%" y="213" width="0.1805%" height="15" fill="rgb(233,42,35)" fg:x="61847" fg:w="460"/><text x="24.5241%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (48 samples, 0.02%)</title><rect x="24.4358%" y="197" width="0.0188%" height="15" fill="rgb(231,13,6)" fg:x="62259" fg:w="48"/><text x="24.6858%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (45 samples, 0.02%)</title><rect x="24.4370%" y="181" width="0.0177%" height="15" fill="rgb(207,181,40)" fg:x="62262" fg:w="45"/><text x="24.6870%" y="191.50"></text></g><g><title>connect_four`core::array::_&lt;impl core::hash::Hash for [T (2,523 samples, 0.99%)</title><rect x="24.4849%" y="197" width="0.9902%" height="15" fill="rgb(254,173,49)" fg:x="62384" fg:w="2523"/><text x="24.7349%" y="207.50"></text></g><g><title> N]&gt;::hash (2,523 samples, 0.99%)</title><rect x="24.4849%" y="181" width="0.9902%" height="15" fill="rgb(221,1,38)" fg:x="62384" fg:w="2523"/><text x="24.7349%" y="191.50"></text></g><g><title>connect_four`core::hash::Hasher::write_usize (2,197 samples, 0.86%)</title><rect x="24.6128%" y="165" width="0.8623%" height="15" fill="rgb(206,124,46)" fg:x="62710" fg:w="2197"/><text x="24.8628%" y="175.50"></text></g><g><title>connect_four`core::hash::BuildHasher::hash_one (2,840 samples, 1.11%)</title><rect x="24.4554%" y="213" width="1.1147%" height="15" fill="rgb(249,21,11)" fg:x="62309" fg:w="2840"/><text x="24.7054%" y="223.50"></text></g><g><title>connect_four`core::hash::Hasher::write_usize (242 samples, 0.09%)</title><rect x="25.4751%" y="197" width="0.0950%" height="15" fill="rgb(222,201,40)" fg:x="64907" fg:w="242"/><text x="25.7251%" y="207.50"></text></g><g><title>connect_four`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (29 samples, 0.01%)</title><rect x="25.5720%" y="197" width="0.0114%" height="15" fill="rgb(235,61,29)" fg:x="65154" fg:w="29"/><text x="25.8220%" y="207.50"></text></g><g><title>connect_four`core::array::_&lt;impl core::hash::Hash for [T (153 samples, 0.06%)</title><rect x="25.5858%" y="181" width="0.0601%" height="15" fill="rgb(219,207,3)" fg:x="65189" fg:w="153"/><text x="25.8358%" y="191.50"></text></g><g><title> N]&gt;::hash (153 samples, 0.06%)</title><rect x="25.5858%" y="165" width="0.0601%" height="15" fill="rgb(222,56,46)" fg:x="65189" fg:w="153"/><text x="25.8358%" y="175.50"></text></g><g><title>connect_four`core::hash::Hasher::write_usize (130 samples, 0.05%)</title><rect x="25.5948%" y="149" width="0.0510%" height="15" fill="rgb(239,76,54)" fg:x="65212" fg:w="130"/><text x="25.8448%" y="159.50"></text></g><g><title>connect_four`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (207 samples, 0.08%)</title><rect x="25.5701%" y="213" width="0.0812%" height="15" fill="rgb(231,124,27)" fg:x="65149" fg:w="207"/><text x="25.8201%" y="223.50"></text></g><g><title>connect_four`core::hash::BuildHasher::hash_one (173 samples, 0.07%)</title><rect x="25.5834%" y="197" width="0.0679%" height="15" fill="rgb(249,195,6)" fg:x="65183" fg:w="173"/><text x="25.8334%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (57 samples, 0.02%)</title><rect x="25.6973%" y="197" width="0.0224%" height="15" fill="rgb(237,174,47)" fg:x="65473" fg:w="57"/><text x="25.9473%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (113 samples, 0.04%)</title><rect x="25.7196%" y="197" width="0.0444%" height="15" fill="rgb(206,201,31)" fg:x="65530" fg:w="113"/><text x="25.9696%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (242 samples, 0.09%)</title><rect x="25.6694%" y="213" width="0.0950%" height="15" fill="rgb(231,57,52)" fg:x="65402" fg:w="242"/><text x="25.9194%" y="223.50"></text></g><g><title>connect_four`connect_four::analysis::update_parents (26,808 samples, 10.52%)</title><rect x="15.2493%" y="229" width="10.5218%" height="15" fill="rgb(248,177,22)" fg:x="38853" fg:w="26808"/><text x="15.4993%" y="239.50">connect_four`co..</text></g><g><title>connect_four`connect_four::board::Board::next_to_move (1,596 samples, 0.63%)</title><rect x="25.9355%" y="213" width="0.6264%" height="15" fill="rgb(215,211,37)" fg:x="66080" fg:w="1596"/><text x="26.1855%" y="223.50"></text></g><g><title>connect_four`connect_four::board::Board::winner (1,483 samples, 0.58%)</title><rect x="25.9798%" y="197" width="0.5821%" height="15" fill="rgb(241,128,51)" fg:x="66193" fg:w="1483"/><text x="26.2298%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (30 samples, 0.01%)</title><rect x="26.6192%" y="181" width="0.0118%" height="15" fill="rgb(227,165,31)" fg:x="67822" fg:w="30"/><text x="26.8692%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (226 samples, 0.09%)</title><rect x="26.5643%" y="213" width="0.0887%" height="15" fill="rgb(228,167,24)" fg:x="67682" fg:w="226"/><text x="26.8143%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (217 samples, 0.09%)</title><rect x="26.5678%" y="197" width="0.0852%" height="15" fill="rgb(228,143,12)" fg:x="67691" fg:w="217"/><text x="26.8178%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (56 samples, 0.02%)</title><rect x="26.6310%" y="181" width="0.0220%" height="15" fill="rgb(249,149,8)" fg:x="67852" fg:w="56"/><text x="26.8810%" y="191.50"></text></g><g><title>connect_four`connect_four::board::Board::next_boards (2,248 samples, 0.88%)</title><rect x="25.7710%" y="229" width="0.8823%" height="15" fill="rgb(243,35,44)" fg:x="65661" fg:w="2248"/><text x="26.0210%" y="239.50"></text></g><g><title>connect_four`connect_four::board::Board::next_to_move (3,029 samples, 1.19%)</title><rect x="26.6533%" y="229" width="1.1888%" height="15" fill="rgb(246,89,9)" fg:x="67909" fg:w="3029"/><text x="26.9033%" y="239.50"></text></g><g><title>connect_four`connect_four::board::Board::winner (2,741 samples, 1.08%)</title><rect x="26.7664%" y="213" width="1.0758%" height="15" fill="rgb(233,213,13)" fg:x="68197" fg:w="2741"/><text x="27.0164%" y="223.50"></text></g><g><title>connect_four`connect_four::board::Board::next_to_move (656 samples, 0.26%)</title><rect x="27.8901%" y="213" width="0.2575%" height="15" fill="rgb(233,141,41)" fg:x="71060" fg:w="656"/><text x="28.1401%" y="223.50"></text></g><g><title>connect_four`connect_four::board::Board::winner (612 samples, 0.24%)</title><rect x="27.9073%" y="197" width="0.2402%" height="15" fill="rgb(239,167,4)" fg:x="71104" fg:w="612"/><text x="28.1573%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (89 samples, 0.03%)</title><rect x="28.1507%" y="213" width="0.0349%" height="15" fill="rgb(209,217,16)" fg:x="71724" fg:w="89"/><text x="28.4007%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (83 samples, 0.03%)</title><rect x="28.1530%" y="197" width="0.0326%" height="15" fill="rgb(219,88,35)" fg:x="71730" fg:w="83"/><text x="28.4030%" y="207.50"></text></g><g><title>connect_four`connect_four::board::Board::prev_boards (876 samples, 0.34%)</title><rect x="27.8422%" y="229" width="0.3438%" height="15" fill="rgb(220,193,23)" fg:x="70938" fg:w="876"/><text x="28.0922%" y="239.50"></text></g><g><title>connect_four`core::array::_&lt;impl core::hash::Hash for [T (5,011 samples, 1.97%)</title><rect x="28.2516%" y="213" width="1.9667%" height="15" fill="rgb(230,90,52)" fg:x="71981" fg:w="5011"/><text x="28.5016%" y="223.50">c..</text></g><g><title> N]&gt;::hash (5,011 samples, 1.97%)</title><rect x="28.2516%" y="197" width="1.9667%" height="15" fill="rgb(252,106,19)" fg:x="71981" fg:w="5011"/><text x="28.5016%" y="207.50"> ..</text></g><g><title>connect_four`core::hash::Hasher::write_usize (4,335 samples, 1.70%)</title><rect x="28.5169%" y="181" width="1.7014%" height="15" fill="rgb(206,74,20)" fg:x="72657" fg:w="4335"/><text x="28.7669%" y="191.50"></text></g><g><title>connect_four`core::hash::BuildHasher::hash_one (5,699 samples, 2.24%)</title><rect x="28.1903%" y="229" width="2.2368%" height="15" fill="rgb(230,138,44)" fg:x="71825" fg:w="5699"/><text x="28.4403%" y="239.50">c..</text></g><g><title>connect_four`core::hash::Hasher::write_usize (532 samples, 0.21%)</title><rect x="30.2183%" y="213" width="0.2088%" height="15" fill="rgb(235,182,43)" fg:x="76992" fg:w="532"/><text x="30.4683%" y="223.50"></text></g><g><title>connect_four`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (54 samples, 0.02%)</title><rect x="30.4318%" y="213" width="0.0212%" height="15" fill="rgb(242,16,51)" fg:x="77536" fg:w="54"/><text x="30.6818%" y="223.50"></text></g><g><title>connect_four`core::array::_&lt;impl core::hash::Hash for [T (284 samples, 0.11%)</title><rect x="30.4561%" y="197" width="0.1115%" height="15" fill="rgb(248,9,4)" fg:x="77598" fg:w="284"/><text x="30.7061%" y="207.50"></text></g><g><title> N]&gt;::hash (284 samples, 0.11%)</title><rect x="30.4561%" y="181" width="0.1115%" height="15" fill="rgb(210,31,22)" fg:x="77598" fg:w="284"/><text x="30.7061%" y="191.50"></text></g><g><title>connect_four`core::hash::Hasher::write_usize (246 samples, 0.10%)</title><rect x="30.4711%" y="165" width="0.0966%" height="15" fill="rgb(239,54,39)" fg:x="77636" fg:w="246"/><text x="30.7211%" y="175.50"></text></g><g><title>connect_four`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (387 samples, 0.15%)</title><rect x="30.4271%" y="229" width="0.1519%" height="15" fill="rgb(230,99,41)" fg:x="77524" fg:w="387"/><text x="30.6771%" y="239.50"></text></g><g><title>connect_four`core::hash::BuildHasher::hash_one (321 samples, 0.13%)</title><rect x="30.4530%" y="213" width="0.1260%" height="15" fill="rgb(253,106,12)" fg:x="77590" fg:w="321"/><text x="30.7030%" y="223.50"></text></g><g><title>connect_four`core::hash::Hasher::write_usize (29 samples, 0.01%)</title><rect x="30.5676%" y="197" width="0.0114%" height="15" fill="rgb(213,46,41)" fg:x="77882" fg:w="29"/><text x="30.8176%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (28 samples, 0.01%)</title><rect x="30.5790%" y="229" width="0.0110%" height="15" fill="rgb(215,133,35)" fg:x="77911" fg:w="28"/><text x="30.8290%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (130 samples, 0.05%)</title><rect x="30.6752%" y="213" width="0.0510%" height="15" fill="rgb(213,28,5)" fg:x="78156" fg:w="130"/><text x="30.9252%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (183 samples, 0.07%)</title><rect x="30.7262%" y="213" width="0.0718%" height="15" fill="rgb(215,77,49)" fg:x="78286" fg:w="183"/><text x="30.9762%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (472 samples, 0.19%)</title><rect x="30.6147%" y="229" width="0.1853%" height="15" fill="rgb(248,100,22)" fg:x="78002" fg:w="472"/><text x="30.8647%" y="239.50"></text></g><g><title>connect_four`connect_four::analysis::update_parents (52,866 samples, 20.75%)</title><rect x="10.0653%" y="245" width="20.7492%" height="15" fill="rgb(208,67,9)" fg:x="25645" fg:w="52866"/><text x="10.3153%" y="255.50">connect_four`connect_four::analys..</text></g><g><title>connect_four`connect_four::board::Board::next_to_move (1,324 samples, 0.52%)</title><rect x="30.9507%" y="229" width="0.5197%" height="15" fill="rgb(219,133,21)" fg:x="78858" fg:w="1324"/><text x="31.2007%" y="239.50"></text></g><g><title>connect_four`connect_four::board::Board::winner (1,235 samples, 0.48%)</title><rect x="30.9856%" y="213" width="0.4847%" height="15" fill="rgb(246,46,29)" fg:x="78947" fg:w="1235"/><text x="31.2356%" y="223.50"></text></g><g><title>connect_four`connect_four::board::Board::next_boards (1,862 samples, 0.73%)</title><rect x="30.8145%" y="245" width="0.7308%" height="15" fill="rgb(246,185,52)" fg:x="78511" fg:w="1862"/><text x="31.0645%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (174 samples, 0.07%)</title><rect x="31.4770%" y="229" width="0.0683%" height="15" fill="rgb(252,136,11)" fg:x="80199" fg:w="174"/><text x="31.7270%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (167 samples, 0.07%)</title><rect x="31.4798%" y="213" width="0.0655%" height="15" fill="rgb(219,138,53)" fg:x="80206" fg:w="167"/><text x="31.7298%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (42 samples, 0.02%)</title><rect x="31.5288%" y="197" width="0.0165%" height="15" fill="rgb(211,51,23)" fg:x="80331" fg:w="42"/><text x="31.7788%" y="207.50"></text></g><g><title>connect_four`connect_four::board::Board::next_to_move (2,291 samples, 0.90%)</title><rect x="31.5453%" y="245" width="0.8992%" height="15" fill="rgb(247,221,28)" fg:x="80373" fg:w="2291"/><text x="31.7953%" y="255.50"></text></g><g><title>connect_four`connect_four::board::Board::winner (2,032 samples, 0.80%)</title><rect x="31.6470%" y="229" width="0.7975%" height="15" fill="rgb(251,222,45)" fg:x="80632" fg:w="2032"/><text x="31.8970%" y="239.50"></text></g><g><title>connect_four`connect_four::board::Board::next_to_move (616 samples, 0.24%)</title><rect x="32.4908%" y="229" width="0.2418%" height="15" fill="rgb(217,162,53)" fg:x="82782" fg:w="616"/><text x="32.7408%" y="239.50"></text></g><g><title>connect_four`connect_four::board::Board::winner (554 samples, 0.22%)</title><rect x="32.5151%" y="213" width="0.2174%" height="15" fill="rgb(229,93,14)" fg:x="82844" fg:w="554"/><text x="32.7651%" y="223.50"></text></g><g><title>connect_four`connect_four::board::Board::prev_boards (831 samples, 0.33%)</title><rect x="32.4445%" y="245" width="0.3262%" height="15" fill="rgb(209,67,49)" fg:x="82664" fg:w="831"/><text x="32.6945%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (94 samples, 0.04%)</title><rect x="32.7337%" y="229" width="0.0369%" height="15" fill="rgb(213,87,29)" fg:x="83401" fg:w="94"/><text x="32.9837%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (89 samples, 0.03%)</title><rect x="32.7357%" y="213" width="0.0349%" height="15" fill="rgb(205,151,52)" fg:x="83406" fg:w="89"/><text x="32.9857%" y="223.50"></text></g><g><title>connect_four`core::array::_&lt;impl core::hash::Hash for [T (4,267 samples, 1.67%)</title><rect x="32.8338%" y="229" width="1.6747%" height="15" fill="rgb(253,215,39)" fg:x="83656" fg:w="4267"/><text x="33.0838%" y="239.50"></text></g><g><title> N]&gt;::hash (4,267 samples, 1.67%)</title><rect x="32.8338%" y="213" width="1.6747%" height="15" fill="rgb(221,220,41)" fg:x="83656" fg:w="4267"/><text x="33.0838%" y="223.50"></text></g><g><title>connect_four`core::hash::Hasher::write_usize (3,701 samples, 1.45%)</title><rect x="33.0560%" y="197" width="1.4526%" height="15" fill="rgb(218,133,21)" fg:x="84222" fg:w="3701"/><text x="33.3060%" y="207.50"></text></g><g><title>connect_four`core::hash::BuildHasher::hash_one (4,836 samples, 1.90%)</title><rect x="32.7722%" y="245" width="1.8981%" height="15" fill="rgb(221,193,43)" fg:x="83499" fg:w="4836"/><text x="33.0222%" y="255.50">c..</text></g><g><title>connect_four`core::hash::Hasher::write_usize (412 samples, 0.16%)</title><rect x="34.5086%" y="229" width="0.1617%" height="15" fill="rgb(240,128,52)" fg:x="87923" fg:w="412"/><text x="34.7586%" y="239.50"></text></g><g><title>connect_four`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (136 samples, 0.05%)</title><rect x="34.6805%" y="229" width="0.0534%" height="15" fill="rgb(253,114,12)" fg:x="88361" fg:w="136"/><text x="34.9305%" y="239.50"></text></g><g><title>connect_four`core::array::_&lt;impl core::hash::Hash for [T (604 samples, 0.24%)</title><rect x="34.7382%" y="213" width="0.2371%" height="15" fill="rgb(215,223,47)" fg:x="88508" fg:w="604"/><text x="34.9882%" y="223.50"></text></g><g><title> N]&gt;::hash (604 samples, 0.24%)</title><rect x="34.7382%" y="197" width="0.2371%" height="15" fill="rgb(248,225,23)" fg:x="88508" fg:w="604"/><text x="34.9882%" y="207.50"></text></g><g><title>connect_four`core::hash::Hasher::write_usize (540 samples, 0.21%)</title><rect x="34.7633%" y="181" width="0.2119%" height="15" fill="rgb(250,108,0)" fg:x="88572" fg:w="540"/><text x="35.0133%" y="191.50"></text></g><g><title>connect_four`core::hash::BuildHasher::hash_one (671 samples, 0.26%)</title><rect x="34.7342%" y="229" width="0.2634%" height="15" fill="rgb(228,208,7)" fg:x="88498" fg:w="671"/><text x="34.9842%" y="239.50"></text></g><g><title>connect_four`core::hash::Hasher::write_usize (57 samples, 0.02%)</title><rect x="34.9752%" y="213" width="0.0224%" height="15" fill="rgb(244,45,10)" fg:x="89112" fg:w="57"/><text x="35.2252%" y="223.50"></text></g><g><title>connect_four`core::array::_&lt;impl core::hash::Hash for [T (442 samples, 0.17%)</title><rect x="35.0333%" y="197" width="0.1735%" height="15" fill="rgb(207,125,25)" fg:x="89260" fg:w="442"/><text x="35.2833%" y="207.50"></text></g><g><title> N]&gt;::hash (442 samples, 0.17%)</title><rect x="35.0333%" y="181" width="0.1735%" height="15" fill="rgb(210,195,18)" fg:x="89260" fg:w="442"/><text x="35.2833%" y="191.50"></text></g><g><title>connect_four`core::hash::Hasher::write_usize (367 samples, 0.14%)</title><rect x="35.0628%" y="165" width="0.1440%" height="15" fill="rgb(249,80,12)" fg:x="89335" fg:w="367"/><text x="35.3128%" y="175.50"></text></g><g><title>connect_four`core::hash::BuildHasher::hash_one (502 samples, 0.20%)</title><rect x="35.0259%" y="213" width="0.1970%" height="15" fill="rgb(221,65,9)" fg:x="89241" fg:w="502"/><text x="35.2759%" y="223.50"></text></g><g><title>connect_four`core::hash::Hasher::write_usize (41 samples, 0.02%)</title><rect x="35.2068%" y="197" width="0.0161%" height="15" fill="rgb(235,49,36)" fg:x="89702" fg:w="41"/><text x="35.4568%" y="207.50"></text></g><g><title>connect_four`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,414 samples, 0.55%)</title><rect x="34.6703%" y="245" width="0.5550%" height="15" fill="rgb(225,32,20)" fg:x="88335" fg:w="1414"/><text x="34.9203%" y="255.50"></text></g><g><title>connect_four`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (580 samples, 0.23%)</title><rect x="34.9976%" y="229" width="0.2276%" height="15" fill="rgb(215,141,46)" fg:x="89169" fg:w="580"/><text x="35.2476%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (46 samples, 0.02%)</title><rect x="35.2441%" y="245" width="0.0181%" height="15" fill="rgb(250,160,47)" fg:x="89797" fg:w="46"/><text x="35.4941%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (106 samples, 0.04%)</title><rect x="35.3147%" y="229" width="0.0416%" height="15" fill="rgb(216,222,40)" fg:x="89977" fg:w="106"/><text x="35.5647%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (140 samples, 0.05%)</title><rect x="35.3563%" y="229" width="0.0549%" height="15" fill="rgb(234,217,39)" fg:x="90083" fg:w="140"/><text x="35.6063%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (382 samples, 0.15%)</title><rect x="35.2621%" y="245" width="0.1499%" height="15" fill="rgb(207,178,40)" fg:x="89843" fg:w="382"/><text x="35.5121%" y="255.50"></text></g><g><title>connect_four`connect_four::analysis::update_parents (74,464 samples, 29.23%)</title><rect x="6.1954%" y="261" width="29.2261%" height="15" fill="rgb(221,136,13)" fg:x="15785" fg:w="74464"/><text x="6.4454%" y="271.50">connect_four`connect_four::analysis::update_par..</text></g><g><title>connect_four`__rdl_dealloc (67 samples, 0.03%)</title><rect x="35.4486%" y="245" width="0.0263%" height="15" fill="rgb(249,199,10)" fg:x="90318" fg:w="67"/><text x="35.6986%" y="255.50"></text></g><g><title>connect_four`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (40 samples, 0.02%)</title><rect x="35.4815%" y="245" width="0.0157%" height="15" fill="rgb(249,222,13)" fg:x="90402" fg:w="40"/><text x="35.7315%" y="255.50"></text></g><g><title>connect_four`connect_four::board::Board::next_to_move (674 samples, 0.26%)</title><rect x="35.4972%" y="245" width="0.2645%" height="15" fill="rgb(244,185,38)" fg:x="90442" fg:w="674"/><text x="35.7472%" y="255.50"></text></g><g><title>connect_four`connect_four::board::Board::winner (595 samples, 0.23%)</title><rect x="35.5282%" y="229" width="0.2335%" height="15" fill="rgb(236,202,9)" fg:x="90521" fg:w="595"/><text x="35.7782%" y="239.50"></text></g><g><title>connect_four`__rdl_alloc (40 samples, 0.02%)</title><rect x="36.8921%" y="213" width="0.0157%" height="15" fill="rgb(250,229,37)" fg:x="93996" fg:w="40"/><text x="37.1421%" y="223.50"></text></g><g><title>connect_four`alloc::raw_vec::finish_grow (1,558 samples, 0.61%)</title><rect x="36.9133%" y="213" width="0.6115%" height="15" fill="rgb(206,174,23)" fg:x="94050" fg:w="1558"/><text x="37.1633%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1,400 samples, 0.55%)</title><rect x="36.9753%" y="197" width="0.5495%" height="15" fill="rgb(211,33,43)" fg:x="94208" fg:w="1400"/><text x="37.2253%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (127 samples, 0.05%)</title><rect x="37.5248%" y="213" width="0.0498%" height="15" fill="rgb(245,58,50)" fg:x="95608" fg:w="127"/><text x="37.7748%" y="223.50"></text></g><g><title>connect_four`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1,947 samples, 0.76%)</title><rect x="36.8293%" y="229" width="0.7642%" height="15" fill="rgb(244,68,36)" fg:x="93836" fg:w="1947"/><text x="37.0793%" y="239.50"></text></g><g><title>connect_four`connect_four::board::Board::player_score_on_chain (6,606 samples, 2.59%)</title><rect x="35.7618%" y="245" width="2.5928%" height="15" fill="rgb(232,229,15)" fg:x="91116" fg:w="6606"/><text x="36.0118%" y="255.50">co..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1,915 samples, 0.75%)</title><rect x="37.6029%" y="229" width="0.7516%" height="15" fill="rgb(254,30,23)" fg:x="95807" fg:w="1915"/><text x="37.8529%" y="239.50"></text></g><g><title>connect_four`connect_four::board::Board::winner (795 samples, 0.31%)</title><rect x="38.3545%" y="245" width="0.3120%" height="15" fill="rgb(235,160,14)" fg:x="97722" fg:w="795"/><text x="38.6045%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (32 samples, 0.01%)</title><rect x="38.6666%" y="245" width="0.0126%" height="15" fill="rgb(212,155,44)" fg:x="98517" fg:w="32"/><text x="38.9166%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (337 samples, 0.13%)</title><rect x="38.6791%" y="245" width="0.1323%" height="15" fill="rgb(226,2,50)" fg:x="98549" fg:w="337"/><text x="38.9291%" y="255.50"></text></g><g><title>connect_four`connect_four::board::Board::get_score (8,652 samples, 3.40%)</title><rect x="35.4215%" y="261" width="3.3958%" height="15" fill="rgb(234,177,6)" fg:x="90249" fg:w="8652"/><text x="35.6715%" y="271.50">con..</text></g><g><title>connect_four`connect_four::board::Board::next_to_move (27,024 samples, 10.61%)</title><rect x="41.1333%" y="245" width="10.6065%" height="15" fill="rgb(217,24,9)" fg:x="104802" fg:w="27024"/><text x="41.3833%" y="255.50">connect_four`co..</text></g><g><title>connect_four`connect_four::board::Board::winner (23,726 samples, 9.31%)</title><rect x="42.4278%" y="229" width="9.3121%" height="15" fill="rgb(220,13,46)" fg:x="108100" fg:w="23726"/><text x="42.6778%" y="239.50">connect_four`..</text></g><g><title>connect_four`connect_four::board::Board::winner (30 samples, 0.01%)</title><rect x="51.7399%" y="245" width="0.0118%" height="15" fill="rgb(239,221,27)" fg:x="131826" fg:w="30"/><text x="51.9899%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (206 samples, 0.08%)</title><rect x="51.7517%" y="245" width="0.0809%" height="15" fill="rgb(222,198,25)" fg:x="131856" fg:w="206"/><text x="52.0017%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (33 samples, 0.01%)</title><rect x="52.6257%" y="213" width="0.0130%" height="15" fill="rgb(211,99,13)" fg:x="134083" fg:w="33"/><text x="52.8757%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (351 samples, 0.14%)</title><rect x="52.6387%" y="213" width="0.1378%" height="15" fill="rgb(232,111,31)" fg:x="134116" fg:w="351"/><text x="52.8887%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (173 samples, 0.07%)</title><rect x="53.0822%" y="197" width="0.0679%" height="15" fill="rgb(245,82,37)" fg:x="135246" fg:w="173"/><text x="53.3322%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3,360 samples, 1.32%)</title><rect x="51.8325%" y="245" width="1.3188%" height="15" fill="rgb(227,149,46)" fg:x="132062" fg:w="3360"/><text x="52.0825%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3,185 samples, 1.25%)</title><rect x="51.9012%" y="229" width="1.2501%" height="15" fill="rgb(218,36,50)" fg:x="132237" fg:w="3185"/><text x="52.1512%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (954 samples, 0.37%)</title><rect x="52.7768%" y="213" width="0.3744%" height="15" fill="rgb(226,80,48)" fg:x="134468" fg:w="954"/><text x="53.0268%" y="223.50"></text></g><g><title>connect_four`connect_four::board::Board::next_boards (36,543 samples, 14.34%)</title><rect x="38.8173%" y="261" width="14.3426%" height="15" fill="rgb(238,224,15)" fg:x="98901" fg:w="36543"/><text x="39.0673%" y="271.50">connect_four`connect_f..</text></g><g><title>connect_four`connect_four::board::Board::winner (34,349 samples, 13.48%)</title><rect x="53.1721%" y="261" width="13.4815%" height="15" fill="rgb(241,136,10)" fg:x="135475" fg:w="34349"/><text x="53.4221%" y="271.50">connect_four`connect..</text></g><g><title>connect_four`core::array::_&lt;impl core::hash::Hash for [T (36 samples, 0.01%)</title><rect x="66.6536%" y="261" width="0.0141%" height="15" fill="rgb(208,32,45)" fg:x="169824" fg:w="36"/><text x="66.9036%" y="271.50"></text></g><g><title> N]&gt;::hash (36 samples, 0.01%)</title><rect x="66.6536%" y="245" width="0.0141%" height="15" fill="rgb(207,135,9)" fg:x="169824" fg:w="36"/><text x="66.9036%" y="255.50"></text></g><g><title>connect_four`core::array::_&lt;impl core::hash::Hash for [T (24,997 samples, 9.81%)</title><rect x="66.9790%" y="245" width="9.8110%" height="15" fill="rgb(206,86,44)" fg:x="170653" fg:w="24997"/><text x="67.2290%" y="255.50">connect_four`c..</text></g><g><title> N]&gt;::hash (24,997 samples, 9.81%)</title><rect x="66.9790%" y="229" width="9.8110%" height="15" fill="rgb(245,177,15)" fg:x="170653" fg:w="24997"/><text x="67.2290%" y="239.50"> N]&gt;::hash</text></g><g><title>connect_four`core::hash::Hasher::write_usize (21,741 samples, 8.53%)</title><rect x="68.2569%" y="213" width="8.5330%" height="15" fill="rgb(206,64,50)" fg:x="173909" fg:w="21741"/><text x="68.5069%" y="223.50">connect_four..</text></g><g><title>connect_four`core::hash::BuildHasher::hash_one (28,370 samples, 11.13%)</title><rect x="66.6677%" y="261" width="11.1348%" height="15" fill="rgb(234,36,40)" fg:x="169860" fg:w="28370"/><text x="66.9177%" y="271.50">connect_four`cor..</text></g><g><title>connect_four`core::hash::Hasher::write_usize (2,580 samples, 1.01%)</title><rect x="76.7899%" y="245" width="1.0126%" height="15" fill="rgb(213,64,8)" fg:x="195650" fg:w="2580"/><text x="77.0399%" y="255.50"></text></g><g><title>connect_four`core::array::_&lt;impl core::hash::Hash for [T (582 samples, 0.23%)</title><rect x="77.8422%" y="229" width="0.2284%" height="15" fill="rgb(210,75,36)" fg:x="198331" fg:w="582"/><text x="78.0922%" y="239.50"></text></g><g><title> N]&gt;::hash (582 samples, 0.23%)</title><rect x="77.8422%" y="213" width="0.2284%" height="15" fill="rgb(229,88,21)" fg:x="198331" fg:w="582"/><text x="78.0922%" y="223.50"></text></g><g><title>connect_four`core::hash::Hasher::write_usize (501 samples, 0.20%)</title><rect x="77.8740%" y="197" width="0.1966%" height="15" fill="rgb(252,204,47)" fg:x="198412" fg:w="501"/><text x="78.1240%" y="207.50"></text></g><g><title>connect_four`core::hash::BuildHasher::hash_one (665 samples, 0.26%)</title><rect x="77.8351%" y="245" width="0.2610%" height="15" fill="rgb(208,77,27)" fg:x="198313" fg:w="665"/><text x="78.0851%" y="255.50"></text></g><g><title>connect_four`core::hash::Hasher::write_usize (65 samples, 0.03%)</title><rect x="78.0706%" y="229" width="0.0255%" height="15" fill="rgb(221,76,26)" fg:x="198913" fg:w="65"/><text x="78.3206%" y="239.50"></text></g><g><title>connect_four`core::array::_&lt;impl core::hash::Hash for [T (112 samples, 0.04%)</title><rect x="78.1016%" y="213" width="0.0440%" height="15" fill="rgb(225,139,18)" fg:x="198992" fg:w="112"/><text x="78.3516%" y="223.50"></text></g><g><title> N]&gt;::hash (112 samples, 0.04%)</title><rect x="78.1016%" y="197" width="0.0440%" height="15" fill="rgb(230,137,11)" fg:x="198992" fg:w="112"/><text x="78.3516%" y="207.50"></text></g><g><title>connect_four`core::hash::Hasher::write_usize (94 samples, 0.04%)</title><rect x="78.1087%" y="181" width="0.0369%" height="15" fill="rgb(212,28,1)" fg:x="199010" fg:w="94"/><text x="78.3587%" y="191.50"></text></g><g><title>connect_four`core::hash::BuildHasher::hash_one (122 samples, 0.05%)</title><rect x="78.1008%" y="229" width="0.0479%" height="15" fill="rgb(248,164,17)" fg:x="198990" fg:w="122"/><text x="78.3508%" y="239.50"></text></g><g><title>connect_four`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (878 samples, 0.34%)</title><rect x="77.8049%" y="261" width="0.3446%" height="15" fill="rgb(222,171,42)" fg:x="198236" fg:w="878"/><text x="78.0549%" y="271.50"></text></g><g><title>connect_four`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (136 samples, 0.05%)</title><rect x="78.0961%" y="245" width="0.0534%" height="15" fill="rgb(243,84,45)" fg:x="198978" fg:w="136"/><text x="78.3461%" y="255.50"></text></g><g><title>connect_four`std::sync::mpmc::list::Channel&lt;T&gt;::recv (27 samples, 0.01%)</title><rect x="78.1499%" y="261" width="0.0106%" height="15" fill="rgb(252,49,23)" fg:x="199115" fg:w="27"/><text x="78.3999%" y="271.50"></text></g><g><title>libsystem_c.dylib`0x7ff80a8d8564 (279 samples, 0.11%)</title><rect x="79.1456%" y="245" width="0.1095%" height="15" fill="rgb(215,19,7)" fg:x="201652" fg:w="279"/><text x="79.3956%" y="255.50"></text></g><g><title>libsystem_c.dylib`0x7ff80a8e7386 (259 samples, 0.10%)</title><rect x="79.2563%" y="245" width="0.1017%" height="15" fill="rgb(238,81,41)" fg:x="201934" fg:w="259"/><text x="79.5063%" y="255.50"></text></g><g><title>libsystem_c.dylib`0x7ff80a8e7392 (242 samples, 0.09%)</title><rect x="79.3627%" y="245" width="0.0950%" height="15" fill="rgb(210,199,37)" fg:x="202205" fg:w="242"/><text x="79.6127%" y="255.50"></text></g><g><title>libsystem_c.dylib`0x7ff80a8e739c (288 samples, 0.11%)</title><rect x="79.4581%" y="245" width="0.1130%" height="15" fill="rgb(244,192,49)" fg:x="202448" fg:w="288"/><text x="79.7081%" y="255.50"></text></g><g><title>libsystem_c.dylib`0x7ff80a8e73ac (266 samples, 0.10%)</title><rect x="79.5727%" y="245" width="0.1044%" height="15" fill="rgb(226,211,11)" fg:x="202740" fg:w="266"/><text x="79.8227%" y="255.50"></text></g><g><title>libsystem_c.dylib`0x7ff80a8d8569 (241 samples, 0.09%)</title><rect x="79.7893%" y="229" width="0.0946%" height="15" fill="rgb(236,162,54)" fg:x="203292" fg:w="241"/><text x="80.0393%" y="239.50"></text></g><g><title>libsystem_c.dylib`0x7ff80a8d8577 (268 samples, 0.11%)</title><rect x="79.8839%" y="229" width="0.1052%" height="15" fill="rgb(220,229,9)" fg:x="203533" fg:w="268"/><text x="80.1339%" y="239.50"></text></g><g><title>libsystem_c.dylib`0x7ff80a8d864e (1,087 samples, 0.43%)</title><rect x="79.9918%" y="229" width="0.4266%" height="15" fill="rgb(250,87,22)" fg:x="203808" fg:w="1087"/><text x="80.2418%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`mach_timebase_info (1,087 samples, 0.43%)</title><rect x="79.9918%" y="213" width="0.4266%" height="15" fill="rgb(239,43,17)" fg:x="203808" fg:w="1087"/><text x="80.2418%" y="223.50"></text></g><g><title>libsystem_c.dylib`0x7ff80a8d865e (296 samples, 0.12%)</title><rect x="80.4185%" y="229" width="0.1162%" height="15" fill="rgb(231,177,25)" fg:x="204895" fg:w="296"/><text x="80.6685%" y="239.50"></text></g><g><title>libsystem_c.dylib`0x7ff80a8d8661 (271 samples, 0.11%)</title><rect x="80.5354%" y="229" width="0.1064%" height="15" fill="rgb(219,179,1)" fg:x="205193" fg:w="271"/><text x="80.7854%" y="239.50"></text></g><g><title>libsystem_c.dylib`0x7ff80a8d8674 (275 samples, 0.11%)</title><rect x="80.6418%" y="229" width="0.1079%" height="15" fill="rgb(238,219,53)" fg:x="205464" fg:w="275"/><text x="80.8918%" y="239.50"></text></g><g><title>libsystem_c.dylib`0x7ff80a8d86a5 (16,207 samples, 6.36%)</title><rect x="80.7548%" y="229" width="6.3610%" height="15" fill="rgb(232,167,36)" fg:x="205752" fg:w="16207"/><text x="81.0048%" y="239.50">libsyste..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (16,207 samples, 6.36%)</title><rect x="80.7548%" y="213" width="6.3610%" height="15" fill="rgb(244,19,51)" fg:x="205752" fg:w="16207"/><text x="81.0048%" y="223.50">libsyste..</text></g><g><title>libsystem_c.dylib`0x7ff80a8d86ac (278 samples, 0.11%)</title><rect x="87.1159%" y="229" width="0.1091%" height="15" fill="rgb(224,6,22)" fg:x="221959" fg:w="278"/><text x="87.3659%" y="239.50"></text></g><g><title>libsystem_c.dylib`0x7ff80a8d86bc (532 samples, 0.21%)</title><rect x="87.2258%" y="229" width="0.2088%" height="15" fill="rgb(224,145,5)" fg:x="222239" fg:w="532"/><text x="87.4758%" y="239.50"></text></g><g><title>libsystem_c.dylib`0x7ff80a8d86c4 (10,005 samples, 3.93%)</title><rect x="87.4346%" y="229" width="3.9268%" height="15" fill="rgb(234,130,49)" fg:x="222771" fg:w="10005"/><text x="87.6846%" y="239.50">libs..</text></g><g><title>libsystem_c.dylib`0x7ff80a95766c (291 samples, 0.11%)</title><rect x="91.3669%" y="229" width="0.1142%" height="15" fill="rgb(254,6,2)" fg:x="232790" fg:w="291"/><text x="91.6169%" y="239.50"></text></g><g><title>libsystem_c.dylib`0x7ff80a95769c (248 samples, 0.10%)</title><rect x="91.4811%" y="229" width="0.0973%" height="15" fill="rgb(208,96,46)" fg:x="233081" fg:w="248"/><text x="91.7311%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (275 samples, 0.11%)</title><rect x="91.5784%" y="229" width="0.1079%" height="15" fill="rgb(239,3,39)" fg:x="233329" fg:w="275"/><text x="91.8284%" y="239.50"></text></g><g><title>libsystem_c.dylib`0x7ff80a8e73b1 (30,856 samples, 12.11%)</title><rect x="79.6771%" y="245" width="12.1106%" height="15" fill="rgb(233,210,1)" fg:x="203006" fg:w="30856"/><text x="79.9271%" y="255.50">libsystem_c.dylib`..</text></g><g><title>libsystem_kernel.dylib`mach_timebase_info (258 samples, 0.10%)</title><rect x="91.6864%" y="229" width="0.1013%" height="15" fill="rgb(244,137,37)" fg:x="233604" fg:w="258"/><text x="91.9364%" y="239.50"></text></g><g><title>libsystem_c.dylib`0x7ff80a8e73c7 (268 samples, 0.11%)</title><rect x="91.7884%" y="245" width="0.1052%" height="15" fill="rgb(240,136,2)" fg:x="233864" fg:w="268"/><text x="92.0384%" y="255.50"></text></g><g><title>libsystem_c.dylib`0x7ff80a8e73ca (524 samples, 0.21%)</title><rect x="91.8936%" y="245" width="0.2057%" height="15" fill="rgb(239,18,37)" fg:x="234132" fg:w="524"/><text x="92.1436%" y="255.50"></text></g><g><title>libsystem_c.dylib`0x7ff80a8e73ce (30 samples, 0.01%)</title><rect x="92.0993%" y="245" width="0.0118%" height="15" fill="rgb(218,185,22)" fg:x="234656" fg:w="30"/><text x="92.3493%" y="255.50"></text></g><g><title>libsystem_c.dylib`0x7ff80a8e73d1 (546 samples, 0.21%)</title><rect x="92.1110%" y="245" width="0.2143%" height="15" fill="rgb(225,218,4)" fg:x="234686" fg:w="546"/><text x="92.3610%" y="255.50"></text></g><g><title>libsystem_c.dylib`0x7ff80a8e73d8 (258 samples, 0.10%)</title><rect x="92.3253%" y="245" width="0.1013%" height="15" fill="rgb(230,182,32)" fg:x="235232" fg:w="258"/><text x="92.5753%" y="255.50"></text></g><g><title>libsystem_c.dylib`0x7ff80a8e73db (280 samples, 0.11%)</title><rect x="92.4266%" y="245" width="0.1099%" height="15" fill="rgb(242,56,43)" fg:x="235490" fg:w="280"/><text x="92.6766%" y="255.50"></text></g><g><title>libsystem_c.dylib`0x7ff80a8e73df (545 samples, 0.21%)</title><rect x="92.5365%" y="245" width="0.2139%" height="15" fill="rgb(233,99,24)" fg:x="235770" fg:w="545"/><text x="92.7865%" y="255.50"></text></g><g><title>libsystem_c.dylib`0x7ff80a8e74db (266 samples, 0.10%)</title><rect x="92.7504%" y="245" width="0.1044%" height="15" fill="rgb(234,209,42)" fg:x="236315" fg:w="266"/><text x="93.0004%" y="255.50"></text></g><g><title>connect_four`std::sys::unix::time::Timespec::now (37,689 samples, 14.79%)</title><rect x="78.1636%" y="261" width="14.7924%" height="15" fill="rgb(227,7,12)" fg:x="199150" fg:w="37689"/><text x="78.4136%" y="271.50">connect_four`std::sys::..</text></g><g><title>libsystem_c.dylib`0x7ff80a8e74e0 (258 samples, 0.10%)</title><rect x="92.8548%" y="245" width="0.1013%" height="15" fill="rgb(245,203,43)" fg:x="236581" fg:w="258"/><text x="93.1048%" y="255.50"></text></g><g><title>connect_four`std::sys::unix::time::Timespec::sub_timespec (546 samples, 0.21%)</title><rect x="92.9560%" y="261" width="0.2143%" height="15" fill="rgb(238,205,33)" fg:x="236839" fg:w="546"/><text x="93.2060%" y="271.50"></text></g><g><title>connect_four`std::time::Instant::now (283 samples, 0.11%)</title><rect x="93.1703%" y="261" width="0.1111%" height="15" fill="rgb(231,56,7)" fg:x="237385" fg:w="283"/><text x="93.4203%" y="271.50"></text></g><g><title>connect_four`std::fs::OpenOptions::_open (114 samples, 0.04%)</title><rect x="93.2897%" y="197" width="0.0447%" height="15" fill="rgb(244,186,29)" fg:x="237689" fg:w="114"/><text x="93.5397%" y="207.50"></text></g><g><title>connect_four`std::sys::unix::fs::File::open_c (114 samples, 0.04%)</title><rect x="93.2897%" y="181" width="0.0447%" height="15" fill="rgb(234,111,31)" fg:x="237689" fg:w="114"/><text x="93.5397%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__open (114 samples, 0.04%)</title><rect x="93.2897%" y="165" width="0.0447%" height="15" fill="rgb(241,149,10)" fg:x="237689" fg:w="114"/><text x="93.5397%" y="175.50"></text></g><g><title>connect_four`crossterm::terminal::sys::unix::size (125 samples, 0.05%)</title><rect x="93.2897%" y="213" width="0.0491%" height="15" fill="rgb(249,206,44)" fg:x="237689" fg:w="125"/><text x="93.5397%" y="223.50"></text></g><g><title>connect_four`&lt;tui::backend::crossterm::CrosstermBackend&lt;W&gt; as tui::backend::Backend&gt;::size (148 samples, 0.06%)</title><rect x="93.2897%" y="245" width="0.0581%" height="15" fill="rgb(251,153,30)" fg:x="237689" fg:w="148"/><text x="93.5397%" y="255.50"></text></g><g><title>connect_four`crossterm::terminal::size (148 samples, 0.06%)</title><rect x="93.2897%" y="229" width="0.0581%" height="15" fill="rgb(239,152,38)" fg:x="237689" fg:w="148"/><text x="93.5397%" y="239.50"></text></g><g><title>connect_four`&lt;tui::widgets::block::Block as tui::widgets::Widget&gt;::render (33 samples, 0.01%)</title><rect x="93.3509%" y="245" width="0.0130%" height="15" fill="rgb(249,139,47)" fg:x="237845" fg:w="33"/><text x="93.6009%" y="255.50"></text></g><g><title>connect_four`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (66 samples, 0.03%)</title><rect x="93.3678%" y="213" width="0.0259%" height="15" fill="rgb(244,64,35)" fg:x="237888" fg:w="66"/><text x="93.6178%" y="223.50"></text></g><g><title>connect_four`core::iter::adapters::flatten::and_then_or_clear (58 samples, 0.02%)</title><rect x="93.3709%" y="197" width="0.0228%" height="15" fill="rgb(216,46,15)" fg:x="237896" fg:w="58"/><text x="93.6209%" y="207.50"></text></g><g><title>connect_four`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (32 samples, 0.01%)</title><rect x="93.3811%" y="181" width="0.0126%" height="15" fill="rgb(250,74,19)" fg:x="237922" fg:w="32"/><text x="93.6311%" y="191.50"></text></g><g><title>connect_four`&lt;tui::widgets::reflow::LineTruncator as tui::widgets::reflow::LineComposer&gt;::next_line (83 samples, 0.03%)</title><rect x="93.3658%" y="229" width="0.0326%" height="15" fill="rgb(249,42,33)" fg:x="237883" fg:w="83"/><text x="93.6158%" y="239.50"></text></g><g><title>connect_four`&lt;tui::widgets::paragraph::Paragraph as tui::widgets::Widget&gt;::render (101 samples, 0.04%)</title><rect x="93.3638%" y="245" width="0.0396%" height="15" fill="rgb(242,149,17)" fg:x="237878" fg:w="101"/><text x="93.6138%" y="255.50"></text></g><g><title>connect_four`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (50 samples, 0.02%)</title><rect x="93.4341%" y="229" width="0.0196%" height="15" fill="rgb(244,29,21)" fg:x="238057" fg:w="50"/><text x="93.6841%" y="239.50"></text></g><g><title>connect_four`tui::buffer::Buffer::diff (103 samples, 0.04%)</title><rect x="93.4157%" y="245" width="0.0404%" height="15" fill="rgb(220,130,37)" fg:x="238010" fg:w="103"/><text x="93.6657%" y="255.50"></text></g><g><title>connect_four`tui::terminal::Terminal&lt;B&gt;::draw (466 samples, 0.18%)</title><rect x="93.2818%" y="261" width="0.1829%" height="15" fill="rgb(211,67,2)" fg:x="237669" fg:w="466"/><text x="93.5318%" y="271.50"></text></g><g><title>libsystem_c.dylib`0x7ff80a8e7382 (277 samples, 0.11%)</title><rect x="93.4647%" y="261" width="0.1087%" height="15" fill="rgb(235,68,52)" fg:x="238135" fg:w="277"/><text x="93.7147%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (226 samples, 0.09%)</title><rect x="93.5777%" y="261" width="0.0887%" height="15" fill="rgb(246,142,3)" fg:x="238423" fg:w="226"/><text x="93.8277%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (144 samples, 0.06%)</title><rect x="93.6664%" y="261" width="0.0565%" height="15" fill="rgb(241,25,7)" fg:x="238649" fg:w="144"/><text x="93.9164%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (43 samples, 0.02%)</title><rect x="93.8336%" y="245" width="0.0169%" height="15" fill="rgb(242,119,39)" fg:x="239075" fg:w="43"/><text x="94.0836%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (946 samples, 0.37%)</title><rect x="93.7230%" y="261" width="0.3713%" height="15" fill="rgb(241,98,45)" fg:x="238793" fg:w="946"/><text x="93.9730%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_large (621 samples, 0.24%)</title><rect x="93.8505%" y="245" width="0.2437%" height="15" fill="rgb(254,28,30)" fg:x="239118" fg:w="621"/><text x="94.1005%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (621 samples, 0.24%)</title><rect x="93.8505%" y="229" width="0.2437%" height="15" fill="rgb(241,142,54)" fg:x="239118" fg:w="621"/><text x="94.1005%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (621 samples, 0.24%)</title><rect x="93.8505%" y="213" width="0.2437%" height="15" fill="rgb(222,85,15)" fg:x="239118" fg:w="621"/><text x="94.1005%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (30 samples, 0.01%)</title><rect x="94.0943%" y="261" width="0.0118%" height="15" fill="rgb(210,85,47)" fg:x="239739" fg:w="30"/><text x="94.3443%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (74 samples, 0.03%)</title><rect x="94.6857%" y="245" width="0.0290%" height="15" fill="rgb(224,206,25)" fg:x="241246" fg:w="74"/><text x="94.9357%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1,391 samples, 0.55%)</title><rect x="94.7148%" y="245" width="0.5459%" height="15" fill="rgb(243,201,19)" fg:x="241320" fg:w="1391"/><text x="94.9648%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (291 samples, 0.11%)</title><rect x="95.2607%" y="245" width="0.1142%" height="15" fill="rgb(236,59,4)" fg:x="242711" fg:w="291"/><text x="95.5107%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3,281 samples, 1.29%)</title><rect x="94.1060%" y="261" width="1.2877%" height="15" fill="rgb(254,179,45)" fg:x="239769" fg:w="3281"/><text x="94.3560%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (48 samples, 0.02%)</title><rect x="95.3749%" y="245" width="0.0188%" height="15" fill="rgb(226,14,10)" fg:x="243002" fg:w="48"/><text x="95.6249%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`malloc (28 samples, 0.01%)</title><rect x="95.3938%" y="261" width="0.0110%" height="15" fill="rgb(244,27,41)" fg:x="243050" fg:w="28"/><text x="95.6438%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (26 samples, 0.01%)</title><rect x="95.4185%" y="261" width="0.0102%" height="15" fill="rgb(235,35,32)" fg:x="243113" fg:w="26"/><text x="95.6685%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (10,986 samples, 4.31%)</title><rect x="95.4381%" y="261" width="4.3119%" height="15" fill="rgb(218,68,31)" fg:x="243163" fg:w="10986"/><text x="95.6881%" y="271.50">libsy..</text></g><g><title>connect_four`std::sys_common::backtrace::__rust_begin_short_backtrace (253,906 samples, 99.65%)</title><rect x="0.1044%" y="277" width="99.6546%" height="15" fill="rgb(207,120,37)" fg:x="266" fg:w="253906"/><text x="0.3544%" y="287.50">connect_four`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>connect_four`std::time::Instant::now (249 samples, 0.10%)</title><rect x="99.7590%" y="277" width="0.0977%" height="15" fill="rgb(227,98,0)" fg:x="254172" fg:w="249"/><text x="100.0090%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (213 samples, 0.08%)</title><rect x="99.8666%" y="277" width="0.0836%" height="15" fill="rgb(207,7,3)" fg:x="254446" fg:w="213"/><text x="100.1166%" y="287.50"></text></g><g><title>all (254,786 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(206,98,19)" fg:x="0" fg:w="254786"/><text x="0.2500%" y="367.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (254,766 samples, 99.99%)</title><rect x="0.0078%" y="341" width="99.9922%" height="15" fill="rgb(217,5,26)" fg:x="20" fg:w="254766"/><text x="0.2578%" y="351.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (254,766 samples, 99.99%)</title><rect x="0.0078%" y="325" width="99.9922%" height="15" fill="rgb(235,190,38)" fg:x="20" fg:w="254766"/><text x="0.2578%" y="335.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>connect_four`std::sys::unix::thread::Thread::new::thread_start (254,766 samples, 99.99%)</title><rect x="0.0078%" y="309" width="99.9922%" height="15" fill="rgb(247,86,24)" fg:x="20" fg:w="254766"/><text x="0.2578%" y="319.50">connect_four`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>connect_four`core::ops::function::FnOnce::call_once{{vtable.shim}} (254,766 samples, 99.99%)</title><rect x="0.0078%" y="293" width="99.9922%" height="15" fill="rgb(205,101,16)" fg:x="20" fg:w="254766"/><text x="0.2578%" y="303.50">connect_four`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (56 samples, 0.02%)</title><rect x="99.9780%" y="277" width="0.0220%" height="15" fill="rgb(246,168,33)" fg:x="254730" fg:w="56"/><text x="100.2280%" y="287.50"></text></g></svg></svg>