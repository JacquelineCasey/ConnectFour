<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="261.00"> </text><svg id="frames" x="10" width="1180" total_samples="28029"><g><title>dyld`start (83 samples, 0.30%)</title><rect x="0.0000%" y="213" width="0.2961%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="83"/><text x="0.2500%" y="223.50"></text></g><g><title>libdyld.dylib`0x7ff8188a18d3 (83 samples, 0.30%)</title><rect x="0.0000%" y="197" width="0.2961%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="83"/><text x="0.2500%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__exit (83 samples, 0.30%)</title><rect x="0.0000%" y="181" width="0.2961%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="83"/><text x="0.2500%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__exit (266 samples, 0.95%)</title><rect x="0.2961%" y="213" width="0.9490%" height="15" fill="rgb(248,212,6)" fg:x="83" fg:w="266"/><text x="0.5461%" y="223.50"></text></g><g><title>connect_four`&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (3 samples, 0.01%)</title><rect x="1.2451%" y="149" width="0.0107%" height="15" fill="rgb(208,68,35)" fg:x="349" fg:w="3"/><text x="1.4951%" y="159.50"></text></g><g><title>connect_four`__rdl_dealloc (9 samples, 0.03%)</title><rect x="1.2558%" y="149" width="0.0321%" height="15" fill="rgb(232,128,0)" fg:x="352" fg:w="9"/><text x="1.5058%" y="159.50"></text></g><g><title>connect_four`__rust_dealloc (3 samples, 0.01%)</title><rect x="1.2880%" y="149" width="0.0107%" height="15" fill="rgb(207,160,47)" fg:x="361" fg:w="3"/><text x="1.5380%" y="159.50"></text></g><g><title>connect_four`connect_four::board::Board::next_boards (9 samples, 0.03%)</title><rect x="1.2987%" y="149" width="0.0321%" height="15" fill="rgb(228,23,34)" fg:x="364" fg:w="9"/><text x="1.5487%" y="159.50"></text></g><g><title>connect_four`core::array::_&lt;impl core::hash::Hash for [T (4 samples, 0.01%)</title><rect x="1.3308%" y="149" width="0.0143%" height="15" fill="rgb(218,30,26)" fg:x="373" fg:w="4"/><text x="1.5808%" y="159.50"></text></g><g><title> N]&gt;::hash (4 samples, 0.01%)</title><rect x="1.3308%" y="133" width="0.0143%" height="15" fill="rgb(220,122,19)" fg:x="373" fg:w="4"/><text x="1.5808%" y="143.50"></text></g><g><title>connect_four`&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (429 samples, 1.53%)</title><rect x="9.7827%" y="133" width="1.5306%" height="15" fill="rgb(250,228,42)" fg:x="2742" fg:w="429"/><text x="10.0327%" y="143.50"></text></g><g><title>connect_four`__rdl_alloc (9 samples, 0.03%)</title><rect x="11.3169%" y="133" width="0.0321%" height="15" fill="rgb(240,193,28)" fg:x="3172" fg:w="9"/><text x="11.5669%" y="143.50"></text></g><g><title>connect_four`alloc::raw_vec::finish_grow (3 samples, 0.01%)</title><rect x="11.3597%" y="133" width="0.0107%" height="15" fill="rgb(216,20,37)" fg:x="3184" fg:w="3"/><text x="11.6097%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (3 samples, 0.01%)</title><rect x="11.3597%" y="117" width="0.0107%" height="15" fill="rgb(206,188,39)" fg:x="3184" fg:w="3"/><text x="11.6097%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (3 samples, 0.01%)</title><rect x="11.3597%" y="101" width="0.0107%" height="15" fill="rgb(217,207,13)" fg:x="3184" fg:w="3"/><text x="11.6097%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (3 samples, 0.01%)</title><rect x="11.3597%" y="85" width="0.0107%" height="15" fill="rgb(231,73,38)" fg:x="3184" fg:w="3"/><text x="11.6097%" y="95.50"></text></g><g><title>connect_four`__rdl_dealloc (23 samples, 0.08%)</title><rect x="11.4489%" y="117" width="0.0821%" height="15" fill="rgb(225,20,46)" fg:x="3209" fg:w="23"/><text x="11.6989%" y="127.50"></text></g><g><title>connect_four`__rust_dealloc (9 samples, 0.03%)</title><rect x="11.5309%" y="117" width="0.0321%" height="15" fill="rgb(210,31,41)" fg:x="3232" fg:w="9"/><text x="11.7809%" y="127.50"></text></g><g><title>connect_four`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (16 samples, 0.06%)</title><rect x="11.5630%" y="117" width="0.0571%" height="15" fill="rgb(221,200,47)" fg:x="3241" fg:w="16"/><text x="11.8130%" y="127.50"></text></g><g><title>connect_four`connect_four::board::Board::next_to_move (218 samples, 0.78%)</title><rect x="11.6201%" y="117" width="0.7778%" height="15" fill="rgb(226,26,5)" fg:x="3257" fg:w="218"/><text x="11.8701%" y="127.50"></text></g><g><title>connect_four`connect_four::board::Board::winner (183 samples, 0.65%)</title><rect x="11.7450%" y="101" width="0.6529%" height="15" fill="rgb(249,33,26)" fg:x="3292" fg:w="183"/><text x="11.9950%" y="111.50"></text></g><g><title>connect_four`__rdl_alloc (22 samples, 0.08%)</title><rect x="15.4519%" y="85" width="0.0785%" height="15" fill="rgb(235,183,28)" fg:x="4331" fg:w="22"/><text x="15.7019%" y="95.50"></text></g><g><title>connect_four`alloc::raw_vec::finish_grow (613 samples, 2.19%)</title><rect x="15.5375%" y="85" width="2.1870%" height="15" fill="rgb(221,5,38)" fg:x="4355" fg:w="613"/><text x="15.7875%" y="95.50">c..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (560 samples, 2.00%)</title><rect x="15.7266%" y="69" width="1.9979%" height="15" fill="rgb(247,18,42)" fg:x="4408" fg:w="560"/><text x="15.9766%" y="79.50">l..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (51 samples, 0.18%)</title><rect x="17.7245%" y="85" width="0.1820%" height="15" fill="rgb(241,131,45)" fg:x="4968" fg:w="51"/><text x="17.9745%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc (16 samples, 0.06%)</title><rect x="17.9065%" y="85" width="0.0571%" height="15" fill="rgb(249,31,29)" fg:x="5019" fg:w="16"/><text x="18.1565%" y="95.50"></text></g><g><title>connect_four`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (784 samples, 2.80%)</title><rect x="15.1985%" y="101" width="2.7971%" height="15" fill="rgb(225,111,53)" fg:x="4260" fg:w="784"/><text x="15.4485%" y="111.50">co..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.03%)</title><rect x="17.9635%" y="85" width="0.0321%" height="15" fill="rgb(238,160,17)" fg:x="5035" fg:w="9"/><text x="18.2135%" y="95.50"></text></g><g><title>connect_four`alloc::raw_vec::finish_grow (8 samples, 0.03%)</title><rect x="17.9956%" y="101" width="0.0285%" height="15" fill="rgb(214,148,48)" fg:x="5044" fg:w="8"/><text x="18.2456%" y="111.50"></text></g><g><title>connect_four`connect_four::board::Board::player_score_on_chain (2,311 samples, 8.25%)</title><rect x="12.3979%" y="117" width="8.2450%" height="15" fill="rgb(232,36,49)" fg:x="3475" fg:w="2311"/><text x="12.6479%" y="127.50">connect_fou..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (734 samples, 2.62%)</title><rect x="18.0242%" y="101" width="2.6187%" height="15" fill="rgb(209,103,24)" fg:x="5052" fg:w="734"/><text x="18.2742%" y="111.50">li..</text></g><g><title>connect_four`connect_four::board::Board::winner (248 samples, 0.88%)</title><rect x="20.6429%" y="117" width="0.8848%" height="15" fill="rgb(229,88,8)" fg:x="5786" fg:w="248"/><text x="20.8929%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (13 samples, 0.05%)</title><rect x="21.5277%" y="117" width="0.0464%" height="15" fill="rgb(213,181,19)" fg:x="6034" fg:w="13"/><text x="21.7777%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (92 samples, 0.33%)</title><rect x="21.5741%" y="117" width="0.3282%" height="15" fill="rgb(254,191,54)" fg:x="6047" fg:w="92"/><text x="21.8241%" y="127.50"></text></g><g><title>connect_four`connect_four::board::Board::get_score (2,955 samples, 10.54%)</title><rect x="11.3704%" y="133" width="10.5427%" height="15" fill="rgb(241,83,37)" fg:x="3187" fg:w="2955"/><text x="11.6204%" y="143.50">connect_four`co..</text></g><g><title>libsystem_malloc.dylib`nanov2_try_free_default (3 samples, 0.01%)</title><rect x="21.9023%" y="117" width="0.0107%" height="15" fill="rgb(233,36,39)" fg:x="6139" fg:w="3"/><text x="22.1523%" y="127.50"></text></g><g><title>connect_four`connect_four::board::Board::next_to_move (7,824 samples, 27.91%)</title><rect x="22.9940%" y="117" width="27.9139%" height="15" fill="rgb(226,3,54)" fg:x="6445" fg:w="7824"/><text x="23.2440%" y="127.50">connect_four`connect_four::board::Board::next..</text></g><g><title>connect_four`connect_four::board::Board::winner (6,777 samples, 24.18%)</title><rect x="26.7295%" y="101" width="24.1785%" height="15" fill="rgb(245,192,40)" fg:x="7492" fg:w="6777"/><text x="26.9795%" y="111.50">connect_four`connect_four::board::Boar..</text></g><g><title>connect_four`connect_four::board::Board::play (1,322 samples, 4.72%)</title><rect x="50.9080%" y="117" width="4.7165%" height="15" fill="rgb(238,167,29)" fg:x="14269" fg:w="1322"/><text x="51.1580%" y="127.50">conne..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (46 samples, 0.16%)</title><rect x="55.6281%" y="117" width="0.1641%" height="15" fill="rgb(232,182,51)" fg:x="15592" fg:w="46"/><text x="55.8781%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (5 samples, 0.02%)</title><rect x="55.9706%" y="101" width="0.0178%" height="15" fill="rgb(231,60,39)" fg:x="15688" fg:w="5"/><text x="56.2206%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (8 samples, 0.03%)</title><rect x="57.9150%" y="85" width="0.0285%" height="15" fill="rgb(208,69,12)" fg:x="16233" fg:w="8"/><text x="58.1650%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (79 samples, 0.28%)</title><rect x="57.9436%" y="85" width="0.2819%" height="15" fill="rgb(235,93,37)" fg:x="16241" fg:w="79"/><text x="58.1936%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.01%)</title><rect x="58.2254%" y="85" width="0.0107%" height="15" fill="rgb(213,116,39)" fg:x="16320" fg:w="3"/><text x="58.4754%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (42 samples, 0.15%)</title><rect x="59.0032%" y="69" width="0.1498%" height="15" fill="rgb(222,207,29)" fg:x="16538" fg:w="42"/><text x="59.2532%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,007 samples, 3.59%)</title><rect x="55.7922%" y="117" width="3.5927%" height="15" fill="rgb(206,96,30)" fg:x="15638" fg:w="1007"/><text x="56.0422%" y="127.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (952 samples, 3.40%)</title><rect x="55.9884%" y="101" width="3.3965%" height="15" fill="rgb(218,138,4)" fg:x="15693" fg:w="952"/><text x="56.2384%" y="111.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (322 samples, 1.15%)</title><rect x="58.2361%" y="85" width="1.1488%" height="15" fill="rgb(250,191,14)" fg:x="16323" fg:w="322"/><text x="58.4861%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (65 samples, 0.23%)</title><rect x="59.1530%" y="69" width="0.2319%" height="15" fill="rgb(239,60,40)" fg:x="16580" fg:w="65"/><text x="59.4030%" y="79.50"></text></g><g><title>connect_four`connect_four::board::Board::next_boards (10,518 samples, 37.53%)</title><rect x="21.9130%" y="133" width="37.5254%" height="15" fill="rgb(206,27,48)" fg:x="6142" fg:w="10518"/><text x="22.1630%" y="143.50">connect_four`connect_four::board::Board::next_boards</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (15 samples, 0.05%)</title><rect x="59.3849%" y="117" width="0.0535%" height="15" fill="rgb(225,35,8)" fg:x="16645" fg:w="15"/><text x="59.6349%" y="127.50"></text></g><g><title>connect_four`connect_four::board::Board::next_to_move (5 samples, 0.02%)</title><rect x="59.4384%" y="133" width="0.0178%" height="15" fill="rgb(250,213,24)" fg:x="16660" fg:w="5"/><text x="59.6884%" y="143.50"></text></g><g><title>connect_four`connect_four::board::Board::play (39 samples, 0.14%)</title><rect x="59.4563%" y="133" width="0.1391%" height="15" fill="rgb(247,123,22)" fg:x="16665" fg:w="39"/><text x="59.7063%" y="143.50"></text></g><g><title>connect_four`connect_four::board::Board::player_score_on_chain (10 samples, 0.04%)</title><rect x="59.5954%" y="133" width="0.0357%" height="15" fill="rgb(231,138,38)" fg:x="16704" fg:w="10"/><text x="59.8454%" y="143.50"></text></g><g><title>connect_four`core::array::_&lt;impl core::hash::Hash for [T (5,801 samples, 20.70%)</title><rect x="59.6311%" y="133" width="20.6964%" height="15" fill="rgb(231,145,46)" fg:x="16714" fg:w="5801"/><text x="59.8811%" y="143.50">connect_four`core::array::_&lt;impl ..</text></g><g><title> N]&gt;::hash (5,801 samples, 20.70%)</title><rect x="59.6311%" y="117" width="20.6964%" height="15" fill="rgb(251,118,11)" fg:x="16714" fg:w="5801"/><text x="59.8811%" y="127.50"> N]&gt;::hash</text></g><g><title>connect_four`core::hash::Hasher::write_usize (4,876 samples, 17.40%)</title><rect x="62.9312%" y="101" width="17.3963%" height="15" fill="rgb(217,147,25)" fg:x="17639" fg:w="4876"/><text x="63.1812%" y="111.50">connect_four`core::hash::Ha..</text></g><g><title>connect_four`core::hash::Hasher::write_usize (523 samples, 1.87%)</title><rect x="80.3275%" y="133" width="1.8659%" height="15" fill="rgb(247,81,37)" fg:x="22515" fg:w="523"/><text x="80.5775%" y="143.50">c..</text></g><g><title>connect_four`core::array::_&lt;impl core::hash::Hash for [T (164 samples, 0.59%)</title><rect x="82.3076%" y="101" width="0.5851%" height="15" fill="rgb(209,12,38)" fg:x="23070" fg:w="164"/><text x="82.5576%" y="111.50"></text></g><g><title> N]&gt;::hash (164 samples, 0.59%)</title><rect x="82.3076%" y="85" width="0.5851%" height="15" fill="rgb(227,1,9)" fg:x="23070" fg:w="164"/><text x="82.5576%" y="95.50"></text></g><g><title>connect_four`core::hash::Hasher::write_usize (134 samples, 0.48%)</title><rect x="82.4146%" y="69" width="0.4781%" height="15" fill="rgb(248,47,43)" fg:x="23100" fg:w="134"/><text x="82.6646%" y="79.50"></text></g><g><title>connect_four`core::hash::BuildHasher::hash_one (187 samples, 0.67%)</title><rect x="82.2826%" y="117" width="0.6672%" height="15" fill="rgb(221,10,30)" fg:x="23063" fg:w="187"/><text x="82.5326%" y="127.50"></text></g><g><title>connect_four`core::hash::Hasher::write_usize (16 samples, 0.06%)</title><rect x="82.8927%" y="101" width="0.0571%" height="15" fill="rgb(210,229,1)" fg:x="23234" fg:w="16"/><text x="83.1427%" y="111.50"></text></g><g><title>connect_four`core::array::_&lt;impl core::hash::Hash for [T (275 samples, 0.98%)</title><rect x="83.1103%" y="85" width="0.9811%" height="15" fill="rgb(222,148,37)" fg:x="23295" fg:w="275"/><text x="83.3603%" y="95.50"></text></g><g><title> N]&gt;::hash (275 samples, 0.98%)</title><rect x="83.1103%" y="69" width="0.9811%" height="15" fill="rgb(234,67,33)" fg:x="23295" fg:w="275"/><text x="83.3603%" y="79.50"></text></g><g><title>connect_four`core::hash::Hasher::write_usize (216 samples, 0.77%)</title><rect x="83.3208%" y="53" width="0.7706%" height="15" fill="rgb(247,98,35)" fg:x="23354" fg:w="216"/><text x="83.5708%" y="63.50"></text></g><g><title>connect_four`core::hash::BuildHasher::hash_one (302 samples, 1.08%)</title><rect x="83.0925%" y="101" width="1.0775%" height="15" fill="rgb(247,138,52)" fg:x="23290" fg:w="302"/><text x="83.3425%" y="111.50"></text></g><g><title>connect_four`core::hash::Hasher::write_usize (22 samples, 0.08%)</title><rect x="84.0915%" y="85" width="0.0785%" height="15" fill="rgb(213,79,30)" fg:x="23570" fg:w="22"/><text x="84.3415%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (3 samples, 0.01%)</title><rect x="84.1700%" y="101" width="0.0107%" height="15" fill="rgb(246,177,23)" fg:x="23592" fg:w="3"/><text x="84.4200%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.01%)</title><rect x="84.1700%" y="85" width="0.0107%" height="15" fill="rgb(230,62,27)" fg:x="23592" fg:w="3"/><text x="84.4200%" y="95.50"></text></g><g><title>connect_four`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (559 samples, 1.99%)</title><rect x="82.1970%" y="133" width="1.9944%" height="15" fill="rgb(216,154,8)" fg:x="23039" fg:w="559"/><text x="82.4470%" y="143.50">c..</text></g><g><title>connect_four`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (348 samples, 1.24%)</title><rect x="82.9498%" y="117" width="1.2416%" height="15" fill="rgb(244,35,45)" fg:x="23250" fg:w="348"/><text x="83.1998%" y="127.50"></text></g><g><title>connect_four`std::sync::mpmc::list::Channel&lt;T&gt;::recv (3 samples, 0.01%)</title><rect x="84.1914%" y="133" width="0.0107%" height="15" fill="rgb(251,115,12)" fg:x="23598" fg:w="3"/><text x="84.4414%" y="143.50"></text></g><g><title>connect_four`std::sync::mpmc::context::Context::with::_{{closure}} (3 samples, 0.01%)</title><rect x="84.1914%" y="117" width="0.0107%" height="15" fill="rgb(240,54,50)" fg:x="23598" fg:w="3"/><text x="84.4414%" y="127.50"></text></g><g><title>connect_four`std::thread::park (3 samples, 0.01%)</title><rect x="84.1914%" y="101" width="0.0107%" height="15" fill="rgb(233,84,52)" fg:x="23598" fg:w="3"/><text x="84.4414%" y="111.50"></text></g><g><title>libdispatch.dylib`_dispatch_semaphore_wait_slow (3 samples, 0.01%)</title><rect x="84.1914%" y="85" width="0.0107%" height="15" fill="rgb(207,117,47)" fg:x="23598" fg:w="3"/><text x="84.4414%" y="95.50"></text></g><g><title>connect_four`std::fs::OpenOptions::_open (19 samples, 0.07%)</title><rect x="84.2199%" y="69" width="0.0678%" height="15" fill="rgb(249,43,39)" fg:x="23606" fg:w="19"/><text x="84.4699%" y="79.50"></text></g><g><title>connect_four`std::sys::unix::fs::File::open_c (19 samples, 0.07%)</title><rect x="84.2199%" y="53" width="0.0678%" height="15" fill="rgb(209,38,44)" fg:x="23606" fg:w="19"/><text x="84.4699%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`__open (18 samples, 0.06%)</title><rect x="84.2235%" y="37" width="0.0642%" height="15" fill="rgb(236,212,23)" fg:x="23607" fg:w="18"/><text x="84.4735%" y="47.50"></text></g><g><title>connect_four`crossterm::terminal::sys::unix::size (21 samples, 0.07%)</title><rect x="84.2199%" y="85" width="0.0749%" height="15" fill="rgb(242,79,21)" fg:x="23606" fg:w="21"/><text x="84.4699%" y="95.50"></text></g><g><title>connect_four`crossterm::terminal::size (24 samples, 0.09%)</title><rect x="84.2199%" y="101" width="0.0856%" height="15" fill="rgb(211,96,35)" fg:x="23606" fg:w="24"/><text x="84.4699%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__close_nocancel (3 samples, 0.01%)</title><rect x="84.2948%" y="85" width="0.0107%" height="15" fill="rgb(253,215,40)" fg:x="23627" fg:w="3"/><text x="84.5448%" y="95.50"></text></g><g><title>connect_four`&lt;tui::backend::crossterm::CrosstermBackend&lt;W&gt; as tui::backend::Backend&gt;::size (25 samples, 0.09%)</title><rect x="84.2199%" y="117" width="0.0892%" height="15" fill="rgb(211,81,21)" fg:x="23606" fg:w="25"/><text x="84.4699%" y="127.50"></text></g><g><title>connect_four`&lt;tui::widgets::block::Block as tui::widgets::Widget&gt;::render (3 samples, 0.01%)</title><rect x="84.3127%" y="117" width="0.0107%" height="15" fill="rgb(208,190,38)" fg:x="23632" fg:w="3"/><text x="84.5627%" y="127.50"></text></g><g><title>connect_four`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.01%)</title><rect x="84.3341%" y="85" width="0.0143%" height="15" fill="rgb(235,213,38)" fg:x="23638" fg:w="4"/><text x="84.5841%" y="95.50"></text></g><g><title>connect_four`core::iter::adapters::flatten::and_then_or_clear (4 samples, 0.01%)</title><rect x="84.3341%" y="69" width="0.0143%" height="15" fill="rgb(237,122,38)" fg:x="23638" fg:w="4"/><text x="84.5841%" y="79.50"></text></g><g><title>connect_four`&lt;tui::widgets::reflow::LineTruncator as tui::widgets::reflow::LineComposer&gt;::next_line (5 samples, 0.02%)</title><rect x="84.3341%" y="101" width="0.0178%" height="15" fill="rgb(244,218,35)" fg:x="23638" fg:w="5"/><text x="84.5841%" y="111.50"></text></g><g><title>connect_four`&lt;tui::widgets::paragraph::Paragraph as tui::widgets::Widget&gt;::render (9 samples, 0.03%)</title><rect x="84.3234%" y="117" width="0.0321%" height="15" fill="rgb(240,68,47)" fg:x="23635" fg:w="9"/><text x="84.5734%" y="127.50"></text></g><g><title>connect_four`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.02%)</title><rect x="84.3912%" y="101" width="0.0250%" height="15" fill="rgb(210,16,53)" fg:x="23654" fg:w="7"/><text x="84.6412%" y="111.50"></text></g><g><title>connect_four`tui::buffer::Buffer::diff (16 samples, 0.06%)</title><rect x="84.3626%" y="117" width="0.0571%" height="15" fill="rgb(235,124,12)" fg:x="23646" fg:w="16"/><text x="84.6126%" y="127.50"></text></g><g><title>connect_four`tui::terminal::Terminal&lt;B&gt;::draw (61 samples, 0.22%)</title><rect x="84.2056%" y="133" width="0.2176%" height="15" fill="rgb(224,169,11)" fg:x="23602" fg:w="61"/><text x="84.4556%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (314 samples, 1.12%)</title><rect x="84.4304%" y="133" width="1.1203%" height="15" fill="rgb(250,166,2)" fg:x="23665" fg:w="314"/><text x="84.6804%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (3 samples, 0.01%)</title><rect x="85.5507%" y="133" width="0.0107%" height="15" fill="rgb(242,216,29)" fg:x="23979" fg:w="3"/><text x="85.8007%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (45 samples, 0.16%)</title><rect x="85.5614%" y="133" width="0.1605%" height="15" fill="rgb(230,116,27)" fg:x="23982" fg:w="45"/><text x="85.8114%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (32 samples, 0.11%)</title><rect x="85.7219%" y="133" width="0.1142%" height="15" fill="rgb(228,99,48)" fg:x="24027" fg:w="32"/><text x="85.9719%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (59 samples, 0.21%)</title><rect x="85.8361%" y="133" width="0.2105%" height="15" fill="rgb(253,11,6)" fg:x="24059" fg:w="59"/><text x="86.0861%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (26 samples, 0.09%)</title><rect x="87.4273%" y="117" width="0.0928%" height="15" fill="rgb(247,143,39)" fg:x="24505" fg:w="26"/><text x="87.6773%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.01%)</title><rect x="87.5201%" y="117" width="0.0107%" height="15" fill="rgb(236,97,10)" fg:x="24531" fg:w="3"/><text x="87.7701%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (82 samples, 0.29%)</title><rect x="88.6867%" y="101" width="0.2926%" height="15" fill="rgb(233,208,19)" fg:x="24858" fg:w="82"/><text x="88.9367%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (454 samples, 1.62%)</title><rect x="87.5379%" y="117" width="1.6198%" height="15" fill="rgb(216,164,2)" fg:x="24536" fg:w="454"/><text x="87.7879%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (50 samples, 0.18%)</title><rect x="88.9793%" y="101" width="0.1784%" height="15" fill="rgb(220,129,5)" fg:x="24940" fg:w="50"/><text x="89.2293%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (79 samples, 0.28%)</title><rect x="89.1577%" y="117" width="0.2819%" height="15" fill="rgb(242,17,10)" fg:x="24990" fg:w="79"/><text x="89.4077%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (962 samples, 3.43%)</title><rect x="86.0466%" y="133" width="3.4322%" height="15" fill="rgb(242,107,0)" fg:x="24118" fg:w="962"/><text x="86.2966%" y="143.50">lib..</text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (11 samples, 0.04%)</title><rect x="89.4395%" y="117" width="0.0392%" height="15" fill="rgb(251,28,31)" fg:x="25069" fg:w="11"/><text x="89.6895%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc (7 samples, 0.02%)</title><rect x="89.4788%" y="133" width="0.0250%" height="15" fill="rgb(233,223,10)" fg:x="25080" fg:w="7"/><text x="89.7288%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.02%)</title><rect x="89.5037%" y="133" width="0.0178%" height="15" fill="rgb(215,21,27)" fg:x="25087" fg:w="5"/><text x="89.7537%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc (3 samples, 0.01%)</title><rect x="89.5216%" y="133" width="0.0107%" height="15" fill="rgb(232,23,21)" fg:x="25092" fg:w="3"/><text x="89.7716%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.04%)</title><rect x="89.5323%" y="133" width="0.0357%" height="15" fill="rgb(244,5,23)" fg:x="25095" fg:w="10"/><text x="89.7823%" y="143.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memset (9 samples, 0.03%)</title><rect x="89.5715%" y="133" width="0.0321%" height="15" fill="rgb(226,81,46)" fg:x="25106" fg:w="9"/><text x="89.8215%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2,806 samples, 10.01%)</title><rect x="89.6036%" y="133" width="10.0111%" height="15" fill="rgb(247,70,30)" fg:x="25115" fg:w="2806"/><text x="89.8536%" y="143.50">libsystem_plat..</text></g><g><title>connect_four`std::sys_common::backtrace::__rust_begin_short_backtrace (27,545 samples, 98.27%)</title><rect x="1.3522%" y="149" width="98.2732%" height="15" fill="rgb(212,68,19)" fg:x="379" fg:w="27545"/><text x="1.6022%" y="159.50">connect_four`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (3 samples, 0.01%)</title><rect x="99.6147%" y="133" width="0.0107%" height="15" fill="rgb(240,187,13)" fg:x="27921" fg:w="3"/><text x="99.8647%" y="143.50"></text></g><g><title>connect_four`std::time::Instant::now (15 samples, 0.05%)</title><rect x="99.6254%" y="149" width="0.0535%" height="15" fill="rgb(223,113,26)" fg:x="27924" fg:w="15"/><text x="99.8754%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (3 samples, 0.01%)</title><rect x="99.6789%" y="149" width="0.0107%" height="15" fill="rgb(206,192,2)" fg:x="27939" fg:w="3"/><text x="99.9289%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.01%)</title><rect x="99.6896%" y="149" width="0.0143%" height="15" fill="rgb(241,108,4)" fg:x="27942" fg:w="4"/><text x="99.9396%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (48 samples, 0.17%)</title><rect x="99.7074%" y="149" width="0.1713%" height="15" fill="rgb(247,173,49)" fg:x="27947" fg:w="48"/><text x="99.9574%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4 samples, 0.01%)</title><rect x="99.8787%" y="149" width="0.0143%" height="15" fill="rgb(224,114,35)" fg:x="27995" fg:w="4"/><text x="100.1287%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_try_free_default (6 samples, 0.02%)</title><rect x="99.9001%" y="149" width="0.0214%" height="15" fill="rgb(245,159,27)" fg:x="28001" fg:w="6"/><text x="100.1501%" y="159.50"></text></g><g><title>all (28,029 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(245,172,44)" fg:x="0" fg:w="28029"/><text x="0.2500%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (27,680 samples, 98.75%)</title><rect x="1.2451%" y="213" width="98.7549%" height="15" fill="rgb(236,23,11)" fg:x="349" fg:w="27680"/><text x="1.4951%" y="223.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (27,680 samples, 98.75%)</title><rect x="1.2451%" y="197" width="98.7549%" height="15" fill="rgb(205,117,38)" fg:x="349" fg:w="27680"/><text x="1.4951%" y="207.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>connect_four`std::sys::unix::thread::Thread::new::thread_start (27,680 samples, 98.75%)</title><rect x="1.2451%" y="181" width="98.7549%" height="15" fill="rgb(237,72,25)" fg:x="349" fg:w="27680"/><text x="1.4951%" y="191.50">connect_four`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>connect_four`core::ops::function::FnOnce::call_once{{vtable.shim}} (27,680 samples, 98.75%)</title><rect x="1.2451%" y="165" width="98.7549%" height="15" fill="rgb(244,70,9)" fg:x="349" fg:w="27680"/><text x="1.4951%" y="175.50">connect_four`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (20 samples, 0.07%)</title><rect x="99.9286%" y="149" width="0.0714%" height="15" fill="rgb(217,125,39)" fg:x="28009" fg:w="20"/><text x="100.1786%" y="159.50"></text></g></svg></svg>